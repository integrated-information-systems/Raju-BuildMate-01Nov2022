@using BMSS.WebUI.Models.StockTransViewModels
@model StockTransViewModel
@{

    var isCreating = Model.DocNum == "New";
    ViewBag.Title = (isCreating) ? "Add New Stock Transfer" : "Edit Stock Transfer #" + Model.DocNum;
}
@section Content_Header {
    <section class="content-header">
        <h1>
            @ViewBag.Title
            <small>Stock Transfer</small>
        </h1>
        <ol class="breadcrumb">
            <li><a href="#"><i class="fa fa-dashboard"></i>Transactions</a></li>
            <li class="active"><a href='@Url.Action("Index", "StockTrans")'>Stock Transfer</a></li>
        </ol>
    </section>
}
@section Styles {
    @Styles.Render("~/DataTablesCss")
    @Styles.Render("~/Select2Css")
    @Styles.Render("~/DatePicker")
}
<div class="row" id="MainContent">
    <div class="col-12">
        <div class="box box-primary">
            <div class="box-header">
                <h3 class="box-title">Stock Transfer</h3>
            </div>
            @using (Html.BeginForm(null, null, null, FormMethod.Post, new { @id = "StockTransForm", @class = "form-horizontal", data_bind = "submit: validateAndSubmit" }))
            {
                @Html.ValidationSummary()
                @Html.AntiForgeryToken()
                <div class="box-body">

                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.DocNum)
                                @Html.TextBoxFor(x => x.DocNum, new { @class = "form-control", disabled = "", data_bind = "value: StockTrans.docNum" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.PrintedStatus)
                                @Html.TextBoxFor(x => x.PrintedStatus, new { @class = "form-control", disabled = "", data_bind = "value: StockTrans.printedStatusName" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.CreatedBy)
                                @Html.TextBoxFor(x => x.CreatedBy, new { @class = "form-control", disabled = "" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">

                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.DocDate)
                                @Html.TextBoxFor(x => x.DocDate, new { @class = "form-control datepicker", data_bind = "value: StockTrans.docDate" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.Status)
                                @Html.TextBox("Status", Html.GetDocStatusName(Model.Status), new { @class = "form-control", disabled = "" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.CreatedOn)
                                @if (Model.CreatedOn.ToString("dd'/'MM'/'yyyy").Equals("01/01/0001"))
                                {
                                    @Html.TextBox("CreatedOnString", null, null, new { @class = "form-control", disabled = "" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(x => x.CreatedOn, "{0:dd'/'MM'/'yyyy HH:mm:ss tt}", new { @class = "form-control", disabled = "" })
                                }
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">


                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.Ref)
                                @Html.TextBoxFor(x => x.Ref, new { @class = "form-control", data_bind = "value: StockTrans.ref" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.SyncStatus)
                                @Html.TextBox("Status", Html.GetSyncStatusName(Model.SyncStatus), new { @class = "form-control", disabled = "" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.UpdatedBy)
                                @Html.TextBoxFor(x => x.UpdatedBy, new { @class = "form-control", disabled = "" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">

                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">

                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">

                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.UpdatedOn)
                                @if (Model.UpdatedOn.ToString("dd'/'MM'/'yyyy").Equals("01/01/0001"))
                                {
                                    @Html.TextBox("UpdatedOnString", null, null, new { @class = "form-control", disabled = "" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(x => x.UpdatedOn, "{0:dd'/'MM'/'yyyy HH:mm:ss tt}", new { @class = "form-control", disabled = "" })
                                }
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl"></div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="nav-tabs-custom">
                                <ul class="nav nav-tabs">
                                    <li class="nav-item active"><a href="#tab_1" data-toggle="tab" class="nav-link active">Contents</a></li>
                                    <li class="nav-item"><a href="#tab_2" data-toggle="tab" class="nav-link">Notes</a></li>
                                </ul>
                                <div class="tab-content">
                                    <div class="tab-pane active" id="tab_1">
                                        <div class="row">
                                            <div class="col-12">
                                                <button type="button" class="btn btn-primary float-right mr-1" data-bind="click: addStockTransLine">Add</button>
                                            </div>
                                        </div>

                                        <table id="ItemListTable" class="table table-striped table-bordered responsive nowrap bmdatatable" data-fixed-header="true" data-auto-width="true" data-paging='false' data-searching="false" data-length-change="false" data-page-length="5" data-ordering="false" style="width:100%">
                                            <thead>
                                                <tr>
                                                    <th>Line No</th>
                                                    <th>Stock Code</th>
                                                    <th>Description</th>
                                                    <th class="text-right">Qty</th>
                                                    <th>From Location</th>
                                                    <th>To Location</th>                                                  
                                                    <th>Delete</th>
                                                </tr>
                                            </thead>
                                            <tbody></tbody>
                                        </table>

                                    </div>

                                    <div class="tab-pane" id="tab_2">
                                        <div class="row">
                                            <div class="col-12">
                                                <button type="button" class="btn btn-primary float-right mr-1" data-bind="click: addStockTransNote">Add</button>
                                            </div>
                                        </div>
                                        <table id="NoteListTable" class="table table-striped table-bordered responsive nowrap bmdatatable dblEdit" data-fixed-header="true" data-auto-width="false" data-paging='false' data-searching="false" data-length-change="false" data-page-length="5" data-ordering="false" style="width:100%">
                                            <thead>
                                                <tr>
                                                    <th style="width: 10%;">Line No</th>
                                                    <th style="width: 80%;">Note</th>
                                                    <th style="width: 10%;">Delete</th>
                                                </tr>
                                            </thead>
                                            <tbody></tbody>
                                        </table>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="box-footer">
                    <Button type="submit" Class="btn btn-primary" data-bind="attr : {'disabled' : isDisabled}">Save</Button>
                    <a class="btn btn-primary" href="@Url.Action("Index")" role="button">Close w/o Saving</a>
                    @*<a class="btn btn-primary" target="_blank" href="@Url.Action("STViewer.aspx","WForms/", new { id = Model.DocEntry })" role="button">Print</a>*@
                    <a class="btn btn-primary" target="_blank" href="#" data-bind="click: printPreview" role="button">Print</a>
                    <Button type="submit" Class="btn btn-primary" data-bind="click: validateAndSubmitToSAP, attr : {'disabled' : isDisabled}">Submit To SAP</Button>
                    <Button type="submit" Class="btn btn-primary" data-bind="click: validateAndSubmitToSAP, attr : {'disabled' : isDisabledResubmit}">Re-Submit To SAP</Button>
                </div>
            }
        </div>
    </div>
</div>
@section BootModals {
    @Html.Partial("_StockTransLineDetailModal", new StockTransLineViewModel() { });
    @Html.Partial("_StockTransNoteDetailModal", new StockTransNoteViewModel() { });
}
@section Scripts {
    @Scripts.Render("~/DataTables")
    @Scripts.Render("~/bundles/Jquery-Validation-and-Ajax")
    @Scripts.Render("~/Select2")
    @Scripts.Render("~/DatePickerJS")
    @Scripts.Render("~/Knockout")

    <script>
        function StockTransViewModel(sT) {
           
            var self = this;
            self.isCreating = sT.docNum == "New";
            self.previewUrl = ko.observable('@Url.Action("STViewer.aspx", "WForms/", new { id = Model.DocEntry })');

            // Loaded from ajax - Observable Arrays
            self.isDisabled = ko.observable(false);
            self.isDisabledResubmit = ko.observable(true);

            self.ItemCodesAndNames = ko.observableArray();
            self.LocationCodeAndNames = ko.observableArray();
            self.ChildItemDetails = ko.observableArray();

            self.CopyDescToOwDesc = function () {
                self.StockTransLine.overwriteDescription($('#AddUpdateItemModal').find("#Description:first").find("option:selected").text());
            }

            // Model Binding
            self.StockTrans = {                
                docNum: ko.observable(sT.docNum),
                docDate: ko.observable(sT.docDate),
                ref: ko.observable(sT.ref),
                printedStatus: ko.observable(sT.printedStatus), 
                submittedToSAP: ko.observable(sT.submittedToSAP),
                syncedToSAP: ko.observable(sT.syncedToSAP),
                syncStatus: ko.observable(sT.syncStatus),
                lines: ko.observableArray(sT.lines),
                noteLines: ko.observableArray(sT.noteLines),
            }

            if (sT.printedStatus === 0) {
                self.StockTrans.printedStatusName = ko.observable('Not Printed');
            }
            else {
                self.StockTrans.printedStatusName = ko.observable('Printed');
            }
            self.StockTrans.printedStatus.subscribe(function (newValue) {
                if (newValue === 0)
                    self.StockTrans.printedStatusName('Not Printed');
                else
                    self.StockTrans.printedStatusName('Printed');
            })
            self.printPreview = function () {
               
                $.ajax({
                url: "@Url.Action("CanPrint", "StockTrans", null)",
                type: 'post',
                contentType: 'application/x-www-form-urlencoded',
                data: { DocEntry: @Model.DocEntry },
                success: function (data)
                {
                    if (data.canAccess) {                       
                        self.StockTrans.printedStatus(1);
                        window.open(self.previewUrl(), '_blank');
                    }
                    else {                        
                        let form = $('form[id="StockTransForm"]');
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                        $('<div class="alert alert-danger alert-dismissible"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button><h4><i class="icon fa fa-ban"></i> Alert!</h4><p>Access denied</p></div>')
                            .prependTo($(form))
                            .delay(5000)
                            .slideUpAndRemove('slow');   
                    }
                            
                },
                error: function ()
                {
                             
                }
                });
            }



            self.isDisabled(self.StockTrans.submittedToSAP());
            if (self.isDisabled() === false) {
                self.isDisabled(self.StockTrans.syncedToSAP());
            }
            if (self.StockTrans.syncStatus() == 3) { // Sync Failed
                self.isDisabledResubmit(false);
                if (self.isDisabled() === false) {
                    self.isDisabled(true);
                }
            }
            else {
                self.isDisabledResubmit(true);

            }
            var originalState = sT;

            //Single StockTransLine Object Setup
            self.StockTransLine = {
                lineNum: ko.observable(),
                itemCode: ko.observable(),
                description: ko.observable(),
                overwriteDescription: ko.observable(),
                description2: ko.observable(),
                description3: ko.observable(),
                description4: ko.observable(),
                description5: ko.observable(),
                description6: ko.observable(),
                serialNumber: ko.observable(),
                qty: ko.observable(),
                fromLocation: ko.observable(),
                fromLocationText: '',
                toLocation: ko.observable(),
                toLocationText: '',               
            }
            //Single StockTransNote Object Setup
            self.StockTransNote = {
                lineNum: ko.observable(),
                note: ko.observable(),
            }
            

            // Add/Update/Delete StockTrans Lines
            self.validateAndAddline = function (form) {
                if (!$(form).valid()) {
                    $('#AddUpdateItemModal').scrollTop(0);
                }
                else {
                    var lineNum = 0;
                    if (self.StockTrans.lines() !== null) {
                        lineNum = self.StockTrans.lines().length;
                    }

                    // Remove All li before submission, which he had in the previous validation
                    $(form).find(".validation-summary-errors ul li").remove();
                    $(form).find(".validation-summary-valid ul li").remove();
                    var InputDescription = $(form).find("#Description:first").find("option:selected").text();
                    var fromLocationText = $(form).find("#FromLocation:first").find("option:selected").text();
                    var toLocationText = $(form).find("#ToLocation:first").find("option:selected").text();

                    if (self.StockTransLine.lineNum() === "") {
                        self.StockTrans.lines.push({
                            lineNum: lineNum,
                            itemCode: self.StockTransLine.itemCode(),
                            description: InputDescription,
                            overwriteDescription: self.StockTransLine.overwriteDescription(),
                            description2: self.StockTransLine.description2(),
                            description3: self.StockTransLine.description3(),
                            description4: self.StockTransLine.description4(),
                            description5: self.StockTransLine.description5(),
                            description6: self.StockTransLine.description6(),
                            serialNumber: self.StockTransLine.serialNumber(),
                            qty: parseFloat(self.StockTransLine.qty()).toFixed(3),
                            fromLocation: self.StockTransLine.fromLocation(),
                            fromLocationText: fromLocationText,
                            toLocation: self.StockTransLine.toLocation(),
                            toLocationText: toLocationText,                            

                        });
                    }
                    else {
                        var LineIndex = parseInt(self.StockTransLine.lineNum());

                        self.StockTrans.lines.replace(self.StockTrans.lines()[LineIndex], {
                            lineNum: self.StockTransLine.lineNum(),
                            itemCode: self.StockTransLine.itemCode(),
                            description: InputDescription,
                            overwriteDescription: self.StockTransLine.overwriteDescription(),
                            description2: self.StockTransLine.description2(),
                            description3: self.StockTransLine.description3(),
                            description4: self.StockTransLine.description4(),
                            description5: self.StockTransLine.description5(),
                            description6: self.StockTransLine.description6(),
                            serialNumber: self.StockTransLine.serialNumber(),
                            qty: parseFloat(self.StockTransLine.qty()).toFixed(3),
                            fromLocation: self.StockTransLine.fromLocation(),
                            fromLocationText: fromLocationText,
                            toLocation: self.StockTransLine.toLocation(),
                            toLocationText: toLocationText,                           

                        });
                    }
                }
            }
            self.editStockTransLine = function (rowid, data, event) {

                var clickedRowId = parseInt(rowid);
                if (clickedRowId < self.StockTrans.lines().length) {
                    self.StockTransLine.lineNum(clickedRowId);

                    var itemcode = self.StockTrans.lines()[clickedRowId].itemCode;
                    $('#ItemCode').val(itemcode).trigger('change');

                    self.StockTransLine.itemCode(itemcode);
                    self.StockTransLine.description(itemcode);
                    self.StockTransLine.overwriteDescription(self.StockTrans.lines()[clickedRowId].overwriteDescription);
                    self.StockTransLine.description2(self.StockTrans.lines()[clickedRowId].description2);
                    self.StockTransLine.description3(self.StockTrans.lines()[clickedRowId].description3);
                    self.StockTransLine.description4(self.StockTrans.lines()[clickedRowId].description4);
                    self.StockTransLine.description5(self.StockTrans.lines()[clickedRowId].description5);
                    self.StockTransLine.description6(self.StockTrans.lines()[clickedRowId].description6);
                    self.StockTransLine.serialNumber(self.StockTrans.lines()[clickedRowId].serialNumber);
                    self.StockTransLine.qty(self.StockTrans.lines()[clickedRowId].qty);

                    var fromLocation = self.StockTrans.lines()[clickedRowId].fromLocation;
                    self.StockTransLine.fromLocation(fromLocation);
                    $('#FromLocation').val(fromLocation).trigger('change');


                    var toLocation = self.StockTrans.lines()[clickedRowId].toLocation;
                    self.StockTransLine.toLocation(toLocation);
                    $('#ToLocation').val(toLocation).trigger('change');
                   


                    //self.StockTransLine.lineTotal(self.StockTransLine.lineTotal); //Computed automatically
                    $('#AddUpdateItemModal').modal('show');
                }
            }
            self.addStockTransLine = function () {               
                $('#AddUpdateItemModal').modal('show');
                self.InitializeStockTransLine();
            }
            self.deleteStockTransLine = function (rowid, data, event) {
                var clickedRowId = parseInt(rowid);

                if (clickedRowId < self.StockTrans.lines().length) {
                    self.StockTrans.lines.remove(self.StockTrans.lines()[clickedRowId]);

                }


                var table = $('#ItemListTable').DataTable();

                if (self.StockTrans.lines().length > 0) {
                    table.clear();

                    var i;
                    for (i = 0; i < self.StockTrans.lines().length; i++) {
                        var AddtionalRemarks = '';
                        var defaultDescription = '-';
                        if (self.StockTrans.lines()[i].overwriteDescription === null) {
                            defaultDescription = self.StockTrans.lines()[i].description;
                        }
                        else if (self.StockTrans.lines()[i].overwriteDescription === "") {
                            defaultDescription = self.StockTrans.lines()[i].description;
                        }
                        else {
                            defaultDescription = self.StockTrans.lines()[i].overwriteDescription;
                        }
                        if (self.StockTrans.lines()[i].description2 !== null) {
                            if (self.StockTrans.lines()[i].description2 !== "") {
                                AddtionalRemarks = AddtionalRemarks + self.StockTrans.lines()[i].description2 + "<br/>"
                            }
                        }
                        if (self.StockTrans.lines()[i].description3 !== null) {
                            if (self.StockTrans.lines()[i].description3 !== "") {
                                AddtionalRemarks = AddtionalRemarks + self.StockTrans.lines()[i].description3 + "<br/>"
                            }
                        }
                        if (self.StockTrans.lines()[i].description4 !== null) {
                            if (self.StockTrans.lines()[i].description4 !== "") {
                                AddtionalRemarks = AddtionalRemarks + self.StockTrans.lines()[i].description4 + "<br/>"
                            }
                        }
                        if (self.StockTrans.lines()[i].description5 !== null) {
                            if (self.StockTrans.lines()[i].description5 !== "") {
                                AddtionalRemarks = AddtionalRemarks + self.StockTrans.lines()[i].description5 + "<br/>"
                            }
                        }
                        if (self.StockTrans.lines()[i].description6 !== null) {
                            if (self.StockTrans.lines()[i].description6 !== "") {
                                AddtionalRemarks = AddtionalRemarks + self.StockTrans.lines()[i].description6 + "<br/>"
                            }
                        }
                        defaultDescription = defaultDescription + "<span data-toggle='popover' data-trigger='hover' data-placement='top' data-html='true' data-content='" + AddtionalRemarks + "' data-title='Additional Remarks'><i class='fa fa-fw fa-info-circle'></i></span>";



                        var rowNode = table.row.add([
                            i + 1,
                            self.StockTrans.lines()[i].itemCode,
                            defaultDescription,
                            self.StockTrans.lines()[i].qty,
                            self.StockTrans.lines()[i].fromLocationText,
                            self.StockTrans.lines()[i].toLocationText,                          
                            "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteStockTransLine("
                            + i + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                        ]).draw().node();
                        $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editStockTransLine(" + i + ", data, event) } }");
                        ko.applyBindings(self, rowNode);
                    }

                }
                else {
                    table.clear().draw();
                }



                ////Deletes Row from html table and by calling draw datatable will be redrawn
                //var table = $('#ItemListTable').DataTable();
                //table.row(clickedRowId).remove().draw();

            }
            self.InitializeStockTransLine = function () {
                self.StockTransLine.lineNum('');
                self.StockTransLine.itemCode('');
                self.StockTransLine.description('');
                self.StockTransLine.overwriteDescription('');
                self.StockTransLine.description2('');
                self.StockTransLine.description3('');
                self.StockTransLine.description4('');
                self.StockTransLine.description5('');
                self.StockTransLine.description6('');
                self.StockTransLine.serialNumber('');
                self.StockTransLine.qty('');
                self.StockTransLine.fromLocation('');
                $('#FromLocation').val('').trigger('change');
                self.StockTransLine.toLocation('');
                $('#ToLocation').val('').trigger('change');                

            }
            //Data Table operations
            self.StockTrans.lines.subscribe(function (changes) {


                // Add Lines
                if (changes[0].status === "deleted") {


                }
                else if (self.StockTransLine.lineNum() === "") {
                    var table = $('#ItemListTable').DataTable();
                    var AddtionalRemarks = '';
                    var defaultDescription = '-';
                    if (changes[0].value.overwriteDescription === null) {
                        defaultDescription = changes[0].value.description;
                    }
                    else if (changes[0].value.overwriteDescription === "") {
                        defaultDescription = changes[0].value.description;
                    }
                    else {
                        defaultDescription = changes[0].value.overwriteDescription;
                    }
                    if (changes[0].value.description2 !== null) {
                        if (changes[0].value.description2 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description2 + "<br/>"
                        }
                    }
                    if (changes[0].value.description3 !== null) {
                        if (changes[0].value.description3 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description3 + "<br/>"
                        }
                    }
                    if (changes[0].value.description4 !== null) {
                        if (changes[0].value.description4 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description4 + "<br/>"
                        }
                    }
                    if (changes[0].value.description5 !== null) {
                        if (changes[0].value.description5 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description5 + "<br/>"
                        }
                    }
                    if (changes[0].value.description6 !== null) {
                        if (changes[0].value.description6 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description6 + "<br/>"
                        }
                    }
                    defaultDescription = defaultDescription + "<span data-toggle='popover' data-trigger='hover' data-placement='top' data-html='true' data-content='" + AddtionalRemarks + "' data-title='Additional Remarks'><i class='fa fa-fw fa-info-circle'></i></span>";


                    var rowNode = table.row.add([
                        changes[0].index + 1,
                        changes[0].value.itemCode,
                        defaultDescription,
                        changes[0].value.qty,
                        changes[0].value.fromLocationText,
                        changes[0].value.toLocationText,                       
                        "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteStockTransLine("
                        + changes[0].index + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                    ]).draw().node();
                    $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editStockTransLine(" + changes[0].index + ", data, event) } }");

                    ko.applyBindings(self, rowNode);
                } //Update Lines
                else {

                    var table = $('#ItemListTable').DataTable();
                    var LineIndex = parseInt(self.StockTransLine.lineNum());
                    var AddtionalRemarks = '';
                    var defaultDescription = '-';
                    if (changes[0].value.overwriteDescription === null) {
                        defaultDescription = changes[0].value.description;
                    }
                    else if (changes[0].value.overwriteDescription === "") {
                        defaultDescription = changes[0].value.description;
                    }
                    else {
                        defaultDescription = changes[0].value.overwriteDescription;
                    }
                    if (changes[0].value.description2 !== null) {
                        if (changes[0].value.description2 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description2 + "<br/>"
                        }
                    }
                    if (changes[0].value.description3 !== null) {
                        if (changes[0].value.description3 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description3 + "<br/>"
                        }
                    }
                    if (changes[0].value.description4 !== null) {
                        if (changes[0].value.description4 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description4 + "<br/>"
                        }
                    }
                    if (changes[0].value.description5 !== null) {
                        if (changes[0].value.description5 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description5 + "<br/>"
                        }
                    }
                    if (changes[0].value.description6 !== null) {
                        if (changes[0].value.description6 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description6 + "<br/>"
                        }
                    }
                    defaultDescription = defaultDescription + "<span data-toggle='popover' data-trigger='hover' data-placement='top' data-html='true' data-content='" + AddtionalRemarks + "' data-title='Additional Remarks'><i class='fa fa-fw fa-info-circle'></i></span>";


                    var rowNode = table.row(LineIndex).data([
                        changes[0].index + 1,
                        changes[0].value.itemCode,
                        defaultDescription,
                        changes[0].value.qty,
                        changes[0].value.fromLocationText,
                        changes[0].value.toLocationText,                        
                        "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteStockTransLine("
                        + changes[0].index + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                    ]).draw().node();

                    table.columns.adjust().draw();
                    ko.cleanNode(rowNode);
                    ko.applyBindings(self, rowNode);
                    //ko.applyBindings(StockTransVM, rowNode);
                }

                $('#AddUpdateItemModal').modal('hide');

            }, self, "arrayChange");



            // Add/Update/Delete StockTrans Notes
            self.InitializeStockTransNote = function () {
                self.StockTransNote.lineNum('');
                self.StockTransNote.note('');
            }
            self.validateAndAddNote = function (form) {
                if (!$(form).valid()) {

                    $('#AddUpdateNoteModal').scrollTop(0);
                }
                else {

                    var lineNum = 0;
                    if (self.StockTrans.noteLines() !== null) {
                        lineNum = self.StockTrans.noteLines().length;
                    }

                    if (self.StockTransNote.lineNum() === "") {
                        self.StockTrans.noteLines.push({
                            lineNum: lineNum,
                            note: self.StockTransNote.note(),
                        });
                    }
                    else {

                        var LineIndex = parseInt(self.StockTransNote.lineNum());

                        self.StockTrans.noteLines.replace(self.StockTrans.noteLines()[LineIndex], {
                            lineNum: self.StockTransNote.lineNum(),
                            note: self.StockTransNote.note(),
                        });
                    }
                }
            }
            self.StockTrans.noteLines.subscribe(function (changes) {

                if (changes[0].status === "deleted") {


                }
                else if (self.StockTransNote.lineNum() === "") {

                    var table = $('#NoteListTable').DataTable();
                    var rowNode = table.row.add([
                        changes[0].index + 1,
                        changes[0].value.note,
                        "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteStockTransNote("
                        + changes[0].index + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                    ]).draw().node();
                    $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editStockTransNote(" + changes[0].index + ", data, event) } }");
                    ko.applyBindings(self, rowNode);
                } //Update Lines
                else {

                    var table = $('#NoteListTable').DataTable();
                    var LineIndex = parseInt(self.StockTransNote.lineNum());
                    var rowNode = table.row(LineIndex).data([
                        changes[0].index + 1,
                        changes[0].value.note,
                        "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteStockTransNote("
                        + changes[0].index + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                    ]).draw().node();

                    table.columns.adjust().draw();
                    ko.cleanNode(rowNode);
                    ko.applyBindings(self, rowNode);
                }


                $('#AddUpdateNoteModal').modal('hide');

            }, self, "arrayChange");
            self.editStockTransNote = function (rowid, data, event) {

                var clickedRowId = parseInt(rowid);
                if (clickedRowId < self.StockTrans.noteLines().length) {
                    self.StockTransNote.lineNum(clickedRowId);
                    self.StockTransNote.note(self.StockTrans.noteLines()[clickedRowId].note);

                    //self.StockTransLine.lineTotal(self.StockTransLine.lineTotal); //Computed automatically
                    $('#AddUpdateNoteModal').modal('show');
                }
            }
            self.addStockTransNote = function () {
                $('#AddUpdateNoteModal').modal('show');
                self.InitializeStockTransNote();
            }
            self.deleteStockTransNote = function (rowid, data, event) {
                var clickedRowId = parseInt(rowid);

                if (clickedRowId < self.StockTrans.noteLines().length) {
                    self.StockTrans.noteLines.remove(self.StockTrans.noteLines()[clickedRowId]);

                }


                var table = $('#NoteListTable').DataTable();

                if (self.StockTrans.noteLines().length > 0) {
                    table.clear();

                    var i;
                    for (i = 0; i < self.StockTrans.noteLines().length; i++) {

                        var rowNode = table.row.add([
                            i + 1,
                            self.StockTrans.noteLines()[i].note,
                            "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteStockTransNote("
                            + i + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                        ]).draw().node();
                        $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editStockTransNote(" + i + ", data, event) } }");
                        ko.applyBindings(self, rowNode);
                    }
                     
                }
                else {
                    table.clear().draw();
                }





            }



             // on Change of ItemCode - ItemName value will be selected
            self.StockTransLine.itemCode.subscribe(function (newValue) {
                //self.StockTransLine.description(newValue);
                // Above statement is enough to trigger the change of selection in knockout
                // because of select2 is used we have to use below statement to trigger the change of selection
                $('#Description').val(newValue).trigger('change');
                self.LoadItemDetails();
            });

            self.LoadItemDetails = function () {
                if (self.StockTransLine.itemCode() !== null) {
                    var LocationStocktable = $('#LocationStock').DataTable();
                    LocationStocktable.clear().draw();
                    $.ajax({
                        url: "@Url.Action("GetLocationStockQty", "Item", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ ItemCode: self.StockTransLine.itemCode() }),
                        success: function (data) {

                            var LocStockLines = data;
                            if (LocStockLines !== null) {

                                for (var i = 0; i < LocStockLines.length; i++) {
                                    LocationStocktable.row.add([
                                        LocStockLines[i].WarhouseName,
                                        parseFloat(LocStockLines[i].AvailableQty).toFixed(3),
                                    ]).draw().node();
                                }
                            }

                        },
                        error: function () { }
                    });

                    var PriceHistorytable = $('#PriceHistory').DataTable();
                    PriceHistorytable.clear().draw();
                    $.ajax({
                        url: "@Url.Action("GetStockTransLastPriceHistory", "StockTrans", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ ItemCode: self.StockTransLine.itemCode() }),
                        success: function (data) {

                            var PriceHistoryLines = data;
                            if (PriceHistoryLines !== null) {

                                for (var i = 0; i < PriceHistoryLines.length; i++) {
                                    PriceHistorytable.row.add([
                                        PriceHistoryLines[i].DocDate,
                                        PriceHistoryLines[i].DocNum,
                                        parseFloat(PriceHistoryLines[i].Qty).toFixed(3),                          
                                    ]).draw().node();
                                }
                            }

                        },
                        error: function () { }
                    });

                    $.ajax({
                        url: "@Url.Action("GetItemDefaultWhs", "Item", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ ItemCode: self.StockTransLine.itemCode() }),
                        success: function (data) {
                            if (jQuery.type(self.StockTransLine.location()) == "undefined") {
                                let LocationCodeVal = data.DefaultWhs;
                                $('#FromLocation').val(LocationCodeVal).trigger('change');
                            }
                            else if (self.StockTransLine.location() == '') {
                                let LocationCodeVal = data.DefaultWhs;
                                $('#Location').val(LocationCodeVal).trigger('change');
                            }     

                        },
                        error: function () { }
                    });

                      $.ajax({
                            url: "@Url.Action("GetItemDetails", "Item", null)",
                            type: 'post',
                            contentType: 'application/x-www-form-urlencoded',
                            data: ko.toJS({ ItemCode: self.StockTransLine.itemCode() }),
                            success: function (data) {

                                let DefaultTaxVal = data.DefaultTax;
                                $('#GstName').val(DefaultTaxVal).trigger('change');

                            },
                            error: function () { }
                      });
                      $.ajax({
                            url: "@Url.Action("GetChildItems", "Item", null)",
                            type: 'post',
                            contentType: 'application/x-www-form-urlencoded',
                            data: ko.toJS({ ParentItemCode: self.StockTransLine.itemCode() }),
                            success: function (data) {                                 
                                    self.ChildItemDetails(data);
                            },
                            error: function () { }
                        });

                }
            }

            // on Change of ItemName - ItemCode value will be selected
            self.StockTransLine.description.subscribe(function (newValue) {
                //self.StockTransLine.itemCode(newValue);
                // Above statement is enough to trigger the change of selection in knockout
                // because of select2 is used we have to use below statement to trigger the change of selection
                $('#ItemCode').val(newValue).trigger('change');
            });

            // Initialize Add/Update StockTrans Model to the Initial State of page loaded first
            self.Initialize = function () { // Used to initialize Form





                self.StockTrans.docDate(originalState.docDate);

                self.StockTrans.ref(originalState.ref);

                if (originalState.lines !== null) {
                    //Original state lines are not nul
                    self.StockTrans.lines(originalState.lines);
                }
                else {
                    //Original state lines are null

                    self.StockTrans.lines.removeAll();
                }


            }


            self.validateAndSubmitToSAP = function () {
                var form = $('form[id="StockTransForm"]');

                if (!$(form).valid()) {
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }
                else {

                    // Remove All li before submission, which he had in the previous validation
                    $(form).find(".validation-summary-errors ul li").remove();
                    $(form).find(".validation-summary-valid ul li").remove();

                    self.StockTrans.__RequestVerificationToken = $(form).find('input[name="__RequestVerificationToken"]').val();
                    self.StockTrans.submittedToSAP(true);

                    $.ajax({
                        url: "@Url.Action("Add", "StockTrans", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS(self.StockTrans),
                        success: function (data)
                        {
                            self.successfulSave(form, data);
                        },
                        error: function ()
                        {
                            self.errorSave(form);
                        }
                    });
                }
            }
            // StockTrans Form Submission using Ajax
            self.validateAndSubmit = function (form) {

                //By Default this function will return false, so form submission will not happen
                if (!$(form).valid()) {
                    window.scrollTo({ top: 0, behavior: 'smooth' });

                }
                else {

                    // Remove All li before submission, which he had in the previous validation
                    $(form).find(".validation-summary-errors ul li").remove();
                    $(form).find(".validation-summary-valid ul li").remove();

                    self.StockTrans.__RequestVerificationToken = form[0].value;
                    $.ajax({
                        url: "@Url.Action("Add", "StockTrans", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS(self.StockTrans),
                        success: function (data)
                        {
                            self.successfulSave(form, data);
                        },
                        error: function ()
                        {
                            self.errorSave(form);
                        }
                    });

                }
            }

            self.removeDocID = function (URL) {
                var res = URL.split("/");
                res.pop();
                URL = res.join("/") + "/"
                return URL;
            }

            self.successfulSave = function (form, data) {
                if (Boolean(data.IsModelValid) === true) {

                    if (self.isCreating) {
                        //self.Initialize();
                        //var table = $('#ItemListTable').DataTable();
                        //table.clear().draw();

                        self.StockTrans.docNum(data.DocNum);
                        self.isCreating = false;

                        URL = self.removeDocID(self.previewUrl());
                        URL = URL + data.DocEntry;
                        self.previewUrl(URL);

                        window.scrollTo({ top: 0, behavior: 'smooth' });
                        $('<div class="alert alert-success alert-dismissible"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button><h4><i class="icon fa fa-check"></i> Success!</h4> Stock Transfer ' + data.DocNum + ' Saved Successfully</div>')
                            .prependTo($(form))
                            .delay(5000)
                            .slideUpAndRemove('slow');

                    } else {
                        if (self.StockTrans.submittedToSAP()) {
                            self.isDisabled(self.StockTrans.submittedToSAP());
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                            $('<div class="alert alert-success alert-dismissible"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button><h4><i class="icon fa fa-check"></i> Success!</h4> Stock Transfer ' + self.StockTrans.docNum() + ' Updated Successfully</div>')
                                .prependTo($(form))
                                .delay(5000)
                                .slideUpAndRemove('slow');
                        }
                        else {
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                            $('<div class="alert alert-success alert-dismissible"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button><h4><i class="icon fa fa-check"></i> Success!</h4> Stock Transfer ' + self.StockTrans.docNum() + ' Updated Successfully</div>')
                                .prependTo($(form))
                                .delay(5000)
                                .slideUpAndRemove('slow');
                        }

                    }


                }
                else {

                    var ErrArray = data.ModelErrList;

                        $(form).find(".validation-summary-errors ul li").remove(); // Remove All li if before Submission had client side errors
                        $(form).find(".validation-summary-valid ul li").remove();  // Remove one li with diplay:none style if before Submission didn't had any client side errors

                        for (var i = 0; i < data.ModelErrList.length; i++) {
                            $(form).find(".validation-summary-errors ul").append("<li>" + ErrArray[i] + "</li>");
                            $(form).find(".validation-summary-valid ul").append("<li>" + ErrArray[i] + "</li>");
                        }
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                }

            }
            self.errorSave = function (form) {
                window.scrollTo({ top: 0, behavior: 'smooth' });
                $('<div class="alert alert-danger alert-dismissible"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button><h4><i class="icon fa fa-ban"></i> Alert!</h4><p>Sorry, Some thing went wrong, Please contact website adminitrator</p></div>')
                    .prependTo($(form))
                    .delay(5000)
                    .slideUpAndRemove('slow');
            }






        }
        // Once Document Ready
        $(function () {



            var ItemCodesAndNames;
            var LocationCodeAndNames;

            $.when(
                // Initial Ajax Requests, while page loading

                //Load Item Codes
                $.ajax({
                url: "@Url.Action("GetActiveItems", "Item", null)",
                type: 'get',
                contentType: 'application/x-www-form-urlencoded',
                success: function (data) {

                    ItemCodesAndNames = data;

                    $("#ItemCode").parent().parent().find('.overlay').hide();
                    $("#Description").parent().parent().find('.overlay').hide();
                },
                error: function () { }
                }),
                //Load Location Codes
                $.ajax({
                    url: "@Url.Action("GetWarehouses", "Location", null)",
                    type: 'get',
                    contentType: 'application/x-www-form-urlencoded',
                    success: function (data) {

                       LocationCodeAndNames = data;
                        $("#FromLocation").parent().parent().find('.overlay').hide();
                        $("#ToLocation").parent().parent().find('.overlay').hide();
                    },
                    error: function () { }
                })
            ).done(function () {
                   //View Model Object Initialization
                var StockTransVM = new StockTransViewModel(@Html.ViewModelToJson(Model));

                StockTransVM.ItemCodesAndNames = ItemCodesAndNames;
                StockTransVM.LocationCodeAndNames = LocationCodeAndNames;


                ko.applyBindings(StockTransVM);

                    //Editing StockTrans
                    var ExisingStockTrans = @Html.ViewModelToJson(Model);

                    var StLines = ExisingStockTrans.lines;
                    if (StLines !== null) {
                        for (var i = 0; i < StLines.length; i++) {
                            var stlinetable = $('#ItemListTable').DataTable();                          
                            var defaultDescription = '-';
                            var AddtionalRemarks = '';
                            if (StLines[i].overwriteDescription !== null) {
                                defaultDescription = StLines[i].overwriteDescription;
                            }
                            else {
                                defaultDescription = StLines[i].description;
                            }
                            if (StLines[i].description2 !== null) {
                                AddtionalRemarks = AddtionalRemarks + StLines[i].description2 + "<br/>"
                            }
                            if (StLines[i].description3 !== null) {
                                AddtionalRemarks = AddtionalRemarks + StLines[i].description3 + "<br/>"
                            }
                            if (StLines[i].description4 !== null) {
                                AddtionalRemarks = AddtionalRemarks + StLines[i].description4 + "<br/>"
                            }
                            if (StLines[i].description5 !== null) {
                                AddtionalRemarks = AddtionalRemarks + StLines[i].description5 + "<br/>"
                            }
                            if (StLines[i].description6 !== null) {
                                AddtionalRemarks = AddtionalRemarks + StLines[i].description6
                            }
                            defaultDescription = defaultDescription + "<span data-toggle='popover' data-trigger='hover' data-placement='top' data-html='true' data-content='" + AddtionalRemarks + "' data-title='Additional Remarks'><i class='fa fa-fw fa-info-circle'></i></span>";
                            var rowNode = stlinetable.row.add([
                                i + 1,
                                StLines[i].itemCode,
                                defaultDescription,
                                parseFloat(StLines[i].qty).toFixed(3),
                                StLines[i].fromLocationText,
                                StLines[i].toLocationText,                                
                                "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteStockTransLine("
                                + i + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                            ]).draw().node();
                            $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editStockTransLine(" + i + ", data, event) } }");

                            ko.applyBindings(StockTransVM, rowNode);
                        }
                    }
                var SqNoteLines = ExisingStockTrans.noteLines;

                if (SqNoteLines !== null) {
                    if (jQuery.type(SqNoteLines) !== "undefined") {

                        for (var i = 0; i < SqNoteLines.length; i++) {
                            var sqnotetable = $('#NoteListTable').DataTable();
                            var rowNode = sqnotetable.row.add([
                                i + 1,
                                SqNoteLines[i].note,
                                "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteStockTransNote("
                                + i + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                            ]).draw().node();
                            $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editStockTransNote(" + i + ", data, event) } }");

                            ko.applyBindings(StockTransVM, rowNode);
                        }
                    }
                }

            });





            $('.select2').select2();
            $('.datepicker').datepicker({ format: 'dd/mm/yyyy', autoclose: true });
            var table = $('#ItemListTable').DataTable(
                {
                    "columnDefs": [
                        { className: "text-right", "targets": [3] }
                    ]
                }
            );
            var LocationStocktable = $('#LocationStock').DataTable({
                "columnDefs": [
                    { className: "text-right", "targets": [1] }
                ]
            });

            var PriceHistorytable = $('#PriceHistory').DataTable(
                {
                    "columnDefs": [
                        { className: "text-right", "targets": [2] }
                    ]
                });
            var NoteListTable = $('#NoteListTable').DataTable(
                {
                    "columnDefs": [
                        {
                            width: "10%", "targets": [0],
                            width: "80%", "targets": [1],
                            width: "10%", "targets": [2],
                        }
                    ]
                });

           




            $('table.bmdatatable tbody').on('click', 'tr td button.btn-danger', function () {

                table.row($(this).parents('tr')).remove().draw();
                //if ($(this).parent().parent().hasClass('highlight')) {
                //    $(this).parent().parent().removeClass('highlight');
                //}
                //else {
                //    table.$('tr.highlight').removeClass('highlight');
                //    $(this).parent().parent().addClass('highlight');
                //}
            });

            // Datables Need to be re-drawn again if datatable intialised in hidden area(That is when we put datatables inside tabs)
            // So here we are call draw to redraw table when each tabs become visible
            $(document).on('shown.bs.modal', '#AddUpdateItemModal', function (event) {
                var table = $('#PriceHistory').DataTable();
                table.columns.adjust().draw();
            });
            $('body').popover({
                selector: '[data-toggle="popover"]',
                trigger: 'hover',
                html: true,
            });
        });
    </script>
}