@using BMSS.WebUI.Models.CashSalesViewModels
@model CashSalesViewModel
@{

    var isCreating = Model.DocNum == "New";
    ViewBag.Title = (isCreating) ? "Add New Cash Sale" : "Edit Cash Sale #" + Model.DocNum;

    var defaultGLCode = ViewBag.defaultGLCode;
    var PreferredLocation = ViewBag.PreferredLocation;
}
@section Content_Header {
    <section class="content-header">
        <h1>
            @ViewBag.Title
            <small>Cash Sale</small>
        </h1>
        <ol class="breadcrumb">
            <li><a href="#"><i class="fa fa-dashboard"></i>Transactions</a></li>
            <li class="active"><a href='@Url.Action("IndexNew", "CashSales")'>Cash Sales</a></li>
        </ol>
    </section>
}
@section Styles {
    @Styles.Render("~/DataTablesCss")
    @Styles.Render("~/Select2Css")
    @Styles.Render("~/DatePicker")
}
<div class="row" id="MainContent">
    <div class="col-12">
        <div class="box box-primary">
            <div class="box-header">
                <h3 class="box-title">Cash Sale</h3>
            </div>
            @using (Html.BeginForm(null, null, null, FormMethod.Post, new { @id = "CashSalesForm", @class = "form-horizontal", data_bind = "submit: validateAndSubmit" }))
            {
                @Html.ValidationSummary()
                @Html.AntiForgeryToken()
                <div class="box-body">

                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.CardCode)
                                @Html.DropDownListFor(x => x.CardCode, Enumerable.Empty<SelectListItem>(), null, new { @class = "form-control select2", data_bind = "options: CustomerNameCodes, optionsText: 'Value', optionsValue: 'Value', value: CashSales.cardCode ,optionsCaption: 'Select Customer Code'" })
                            </div>
                            <div class="overlay">
                                <i class="fa fa-refresh fa-spin text-gray"></i>
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.DocNum)
                                @Html.TextBoxFor(x => x.DocNum, new { @class = "form-control", disabled = "", data_bind = "value: CashSales.docNum" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.PrintedStatus)
                                @Html.TextBoxFor(x => x.PrintedStatus, new { @class = "form-control", disabled = "", data_bind = "value: CashSales.printedStatusName" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.Currency)
                                @Html.TextBoxFor(x => x.Currency, new { @class = "form-control", disabled = "", data_bind = "value: CashSales.currency" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.CreatedBy)
                                @Html.TextBoxFor(x => x.CreatedBy, new { @class = "form-control", disabled = "" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            @*<div class="form-group">
        @Html.LabelFor(x => x.OfficeTelNo)
        @Html.DropDownListFor(x => x.OfficeTelNo, Enumerable.Empty<SelectListItem>(), null, new { @class = "form-control select2", data_bind = "options: CashCustomerNameCodes, optionsText: 'Value', optionsValue: 'Value', value: CashSales.officeTelNo ,optionsCaption: 'Select Contact No'" })
                        </div>*@
                            <div class="form-group">
                                @Html.LabelFor(x => x.CardName)
                                @Html.DropDownListFor(x => x.CardName, Enumerable.Empty<SelectListItem>(), null, new { @class = "form-control select2", data_bind = "options: CustomerNameCodes, optionsText: 'Text', optionsValue: 'Value', value: CashSales.cardName,optionsCaption: 'Select Company Name'" })
                            </div>
                            <div class="overlay">
                                <i class="fa fa-refresh fa-spin text-gray"></i>
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.DocDate)
                                @Html.TextBoxFor(x => x.DocDate, new { @class = "form-control datepicker", data_bind = "value: CashSales.docDate" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.Status)
                                @Html.TextBox("Status", Html.GetDocStatusName(Model.Status), new { @class = "form-control", disabled = "" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">

                            <div class="form-group">
                                @*@Html.LabelFor(x => x.PaymentTermName)
        @Html.TextBoxFor(x => x.PaymentTermName, new { @class = "form-control", data_bind = "value: CashSales.paymentTermName", disabled = "" })*@
                                @*@Html.LabelFor(x => x.SlpCode)
        @Html.DropDownListFor(x => x.SlpCode, Enumerable.Empty<SelectListItem>(), null, new { @class = "form-control select2", data_bind = "options: SalesPersons, optionsText: 'Text', optionsValue: 'Value', value: CashSales.slpCode" })*@
                                @Html.LabelFor(x => x.SlpName)
                                @Html.TextBoxFor(x => x.SlpName, new { @class = "form-control", data_bind = "value: CashSales.slpName", disabled = "" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.CreatedOn)
                                @if (Model.CreatedOn.ToString("dd'/'MM'/'yyyy").Equals("01/01/0001"))
                                {
                                    @Html.TextBox("CreatedOnString", null, null, new { @class = "form-control", disabled = "" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(x => x.CreatedOn, "{0:dd'/'MM'/'yyyy HH:mm:ss tt}", new { @class = "form-control", disabled = "" })
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @*@Html.LabelFor(x => x.CardCode)
        @Html.TextBoxFor(x => x.CardCode, new { @class = "form-control", disabled = "" })*@
                                @Html.LabelFor(x => x.OfficeTelNo)
                                @Html.TextBoxFor(x => x.OfficeTelNo, new { @class = "form-control", data_bind = "value: CashSales.officeTelNo" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.DeliveryDate)
                                @Html.TextBoxFor(x => x.DeliveryDate, new { @class = "form-control datepicker", data_bind = "value: CashSales.deliveryDate" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.CustomerRef)
                                @Html.TextBoxFor(x => x.CustomerRef, new { @class = "form-control", data_bind = "value: CashSales.customerRef" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            @*<div class="form-group">
                                @Html.LabelFor(x => x.PaymentLocation)
                                @Html.DropDownListFor(x => x.PaymentLocation, Enumerable.Empty<SelectListItem>(), null, new { @class = "form-control select2", style = "width:100%", data_bind = "options: LocationCodeAndNames, optionsText: 'Text', optionsValue: 'Value', value: CashSales.paymentLocation ,optionsCaption: 'Select Location'" })
                            </div>
                            <div class="overlay">
                                <i class="fa fa-refresh fa-spin text-gray"></i>
                            </div>*@
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.UpdatedBy)
                                @Html.TextBoxFor(x => x.UpdatedBy, new { @class = "form-control", disabled = "" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @*@Html.LabelFor(x => x.CardName)
                                @Html.TextBoxFor(x => x.CardName, new { @class = "form-control", disabled = "" })*@
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.DeliveryTime)
                                @Html.TextBoxFor(x => x.DeliveryTime, new { @class = "form-control", data_bind = "value: CashSales.deliveryTime" })
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">

                        </div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl"></div>
                        <div class="col-sm-12 col-md-6 col-lg-4 col-xl">
                            <div class="form-group">
                                @Html.LabelFor(x => x.UpdatedOn)
                                @if (Model.UpdatedOn.ToString("dd'/'MM'/'yyyy").Equals("01/01/0001"))
                                {
                                    @Html.TextBox("UpdatedOnString", null, null, new { @class = "form-control", disabled = "" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(x => x.UpdatedOn, "{0:dd'/'MM'/'yyyy HH:mm:ss tt}", new { @class = "form-control", disabled = "" })
                                }
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="nav-tabs-custom">
                                <ul class="nav nav-tabs">
                                    <li class="nav-item active"><a href="#tab_1" data-toggle="tab" class="nav-link active">Contents</a></li>
                                    <li class="nav-item"><a href="#tab_2" data-toggle="tab" class="nav-link">Logistics</a></li>
                                    <li class="nav-item"><a href="#tab_3" data-toggle="tab" class="nav-link">Pay To</a></li>
                                    <li class="nav-item"><a href="#tab_4" data-toggle="tab" class="nav-link">Notes</a></li>
                                </ul>
                                <div class="tab-content">
                                    <div class="tab-pane active" id="tab_1">
                                        <div class="row">
                                            <div class="col-12">
                                                <button type="button" class="btn btn-primary float-right mr-1" data-bind="click: addCashSalesLine">Add</button>
                                            </div>
                                        </div>

                                        <table id="ItemListTable" class="table table-striped table-bordered responsive nowrap bmdatatable" data-fixed-header="true" data-auto-width="true" data-paging='false' data-searching="false" data-length-change="false" data-page-length="5" data-ordering="false" style="width:100%">
                                            <thead>
                                                <tr>
                                                    <th>Line No</th>
                                                    <th>Stock Code</th>
                                                    <th>Description</th>
                                                    <th class="text-right">Qty</th>
                                                    <th>Location</th>
                                                    <th class="text-right">Unit Price</th>
                                                    <th>GST</th>
                                                    <th>Line Total</th>
                                                    <th>Delete</th>
                                                </tr>
                                            </thead>
                                            <tbody></tbody>                                             
                                        </table>
                                        <div class="row">
                                            <div class="col-sm-12 col-md-6 col-lg-4 col-xl-4">
                                                <div class="form-group">
                                                    @Html.Label("Header Remarks")
                                                    @Html.TextBoxFor(x => x.HeaderRemarks1, new { @class = "form-control", data_bind = "value: CashSales.headerRemarks1" })
                                                </div>
                                                <div class="form-group">
                                                    @Html.TextBoxFor(x => x.HeaderRemarks2, new { @class = "form-control", data_bind = "value: CashSales.headerRemarks2" })
                                                </div>
                                                <div class="form-group">
                                                    @Html.TextBoxFor(x => x.HeaderRemarks3, new { @class = "form-control", data_bind = "value: CashSales.headerRemarks3" })
                                                </div>
                                                <div class="form-group">
                                                    @Html.TextBoxFor(x => x.HeaderRemarks4, new { @class = "form-control", data_bind = "value: CashSales.headerRemarks4" })
                                                </div>
                                            </div>
                                            <div class="col-sm-12 col-md-6 col-lg-4 col-xl-4">
                                                <div class="form-group">
                                                    @Html.Label("Footer Remarks")
                                                    @Html.TextBoxFor(x => x.FooterRemarks1, new { @class = "form-control", data_bind = "value: CashSales.footerRemarks1" })
                                                </div>
                                                <div class="form-group">
                                                    @Html.TextBoxFor(x => x.FooterRemarks2, new { @class = "form-control", data_bind = "value: CashSales.footerRemarks2" })
                                                </div>
                                                <div class="form-group">
                                                    @Html.TextBoxFor(x => x.FooterRemarks3, new { @class = "form-control", data_bind = "value: CashSales.footerRemarks3" })
                                                </div>
                                                <div class="form-group">
                                                    @Html.TextBoxFor(x => x.FooterRemarks4, new { @class = "form-control", data_bind = "value: CashSales.footerRemarks4" })
                                                </div>
                                            </div>
                                            <div class="col-sm-12 col-md-6 col-lg-4 col-xl-4">
                                                <div class="form-group row">
                                                    @Html.LabelFor(x => x.NetTotal, new { @class = "col-form-label col-4" })
                                                    <div class="col-8">
                                                        @Html.TextBoxFor(x => x.NetTotal, new { @class = "form-control", data_bind = "value: CashSales.netTotal", disabled = "", style = "text-align: right; " })
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(x => x.DiscByPercent, new { @class = "col-form-label col-4" })
                                                    <div class="col-4">
                                                        Percentage @Html.RadioButtonFor(x => x.DiscByPercent, "true", new { data_bind = "checked: CashSales.discByPercent" })
                                                    </div>
                                                    <div class="col-4">
                                                        Amount @Html.RadioButtonFor(x => x.DiscByPercent, "false", new { data_bind = "checked: CashSales.discByPercent" })
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(x => x.DiscPercent, new { @class = "col-form-label col-4" })
                                                    <div class="col-8">
                                                        @Html.TextBoxFor(x => x.DiscPercent, new { @class = "form-control", data_bind = "textInput: CashSales.discPercent", style = "text-align: right; " })
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(x => x.DiscAmount, new { @class = "col-form-label col-4" })
                                                    <div class="col-8">
                                                        @Html.TextBoxFor(x => x.DiscAmount, new { @class = "form-control", data_bind = "textInput: CashSales.discAmount", style = "text-align: right; " })
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(x => x.GstTotal, new { @class = "col-form-label col-4" })
                                                    <div class="col-8">
                                                        @Html.TextBoxFor(x => x.GstTotal, new { @class = "form-control", data_bind = "value: CashSales.gstTotal", style = "text-align: right; ", disabled = "" })
                                                    </div>
                                                </div>
                                                <div class="form-group row">
                                                    @Html.LabelFor(x => x.GrandTotal, new { @class = "col-form-label col-4" })
                                                    <div class="col-8">
                                                        @Html.TextBoxFor(x => x.GrandTotal, new { @class = "form-control", data_bind = "value: CashSales.grandTotal", style = "text-align: right; ", disabled = "" })
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab_2">
                                        <div class="row">
                                            <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                <div class="row">
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.ShipTo)
                                                            @Html.DropDownListFor(x => x.ShipTo, Enumerable.Empty<SelectListItem>(), null, new { @class = "form-control select2", style = "width:100%", data_bind = "options: CustomerShipToAddresses, optionsText: 'Text', optionsValue: 'Value', value: CashSales.shipTo,optionsCaption: 'Select Ship To'" })
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.ShipToAddress1)
                                                            @Html.TextBoxFor(x => x.ShipToAddress1, new { @class = "form-control", data_bind = "value: CashSales.shipToAddress1" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">

                                                    </div>
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.ShipToAddress2)
                                                            @Html.TextBoxFor(x => x.ShipToAddress2, new { @class = "form-control", data_bind = "value: CashSales.shipToAddress2" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">

                                                    </div>
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.ShipToAddress3)
                                                            @Html.TextBoxFor(x => x.ShipToAddress3, new { @class = "form-control", data_bind = "value: CashSales.shipToAddress3" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">

                                                    </div>
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.ShipToAddress4)
                                                            @Html.TextBoxFor(x => x.ShipToAddress4, new { @class = "form-control", data_bind = "value: CashSales.shipToAddress4" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">

                                                    </div>
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.ShipToAddress5)
                                                            @Html.TextBoxFor(x => x.ShipToAddress5, new { @class = "form-control", data_bind = "value: CashSales.shipToAddress5" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                <div class="row">
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.BillTo)
                                                            @Html.DropDownListFor(x => x.BillTo, Enumerable.Empty<SelectListItem>(), null, new { @class = "form-control select2", style = "width:100%", data_bind = "options: CustomerBillToAddresses, optionsText: 'Text', optionsValue: 'Value', value: CashSales.billTo,optionsCaption: 'Select Bill To'" })
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.BillToAddress1)
                                                            @Html.TextBoxFor(x => x.BillToAddress1, new { @class = "form-control", data_bind = "value: CashSales.billToAddress1" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">

                                                    </div>
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.BillToAddress2)
                                                            @Html.TextBoxFor(x => x.BillToAddress2, new { @class = "form-control", data_bind = "value: CashSales.billToAddress2" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">

                                                    </div>
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.BillToAddress3)
                                                            @Html.TextBoxFor(x => x.BillToAddress3, new { @class = "form-control", data_bind = "value: CashSales.billToAddress3" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">

                                                    </div>
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.BillToAddress4)
                                                            @Html.TextBoxFor(x => x.BillToAddress4, new { @class = "form-control", data_bind = "value: CashSales.billToAddress4" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">

                                                    </div>
                                                    <div class="col-sm-12 col-md-12 col-lg-12 col-xl-6">
                                                        <div class="form-group">
                                                            @Html.LabelFor(x => x.BillToAddress5)
                                                            @Html.TextBoxFor(x => x.BillToAddress5, new { @class = "form-control", data_bind = "value: CashSales.billToAddress5" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="tab-pane" id="tab_3">
                                        <div class="row">
                                            <div class="col-12">
                                                <button type="button" class="btn btn-primary float-right mr-1" data-bind="click: addCashSalesPay">Add</button>
                                            </div>
                                        </div>
                                        <table id="PayListTable" class="table table-striped table-bordered responsive nowrap bmdatatable dblEdit" data-fixed-header="true" data-auto-width="false" data-paging='false' data-searching="false" data-length-change="false" data-page-length="5" data-ordering="false" style="width:100%">
                                            <thead>
                                                <tr>
                                                    <th>Line No</th>
                                                    <th>GL Code</th>
                                                    <th>Payment Type</th>
                                                    <th>Paid Amount</th>
                                                    <th>Payment Remarks</th>
                                                    <th>Cheque No Reference</th>
                                                    <th>Payment Location</th>
                                                    <th>Delete</th>
                                                </tr>
                                            </thead>
                                            <tbody></tbody>
                                            <tfoot>
                                                <tr>
                                                    <th colspan="4" class="text-right">
                                                        Balance
                                                    </th>
                                                    <th>                                                                                                                
                                                        <span data-bind="text: BalancePay"> </span>
                                                    </th>
                                                    <th colspan="3">

                                                    </th>
                                                </tr>                                                
                                            </tfoot>
                                        </table>
                                    </div>
                                    <div class="tab-pane" id="tab_4">
                                        <div class="row">
                                            <div class="col-12">
                                                <button type="button" class="btn btn-primary float-right mr-1" data-bind="click: addCashSalesNote">Add</button>
                                            </div>
                                        </div>
                                        <table id="NoteListTable" class="table table-striped table-bordered responsive nowrap bmdatatable dblEdit" data-fixed-header="true" data-auto-width="false" data-paging='false' data-searching="false" data-length-change="false" data-page-length="5" data-ordering="false" style="width:100%">
                                            <thead>
                                                <tr>
                                                    <th style="width: 10%;">Line No</th>
                                                    <th style="width: 80%;">Note</th>
                                                    <th style="width: 10%;">Delete</th>
                                                </tr>
                                            </thead>
                                            <tbody></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="box-footer">

                    <Button type="submit" Class="btn btn-primary" data-bind="attr : {'disabled' : isDisabled}">Save</Button>
                    <a class="btn btn-primary" href="@Url.Action("Index")" role="button">Close w/o Saving</a>
                    @*<a class="btn btn-primary" href="@Url.Action("Index")" role="button">Duplicate</a>*@
                    @*<a class="btn btn-primary" href="#" role="button">Preview</a>*@
                    <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                        Print
                    </button>
                    <ul class="dropdown-menu" x-placement="bottom-start" style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(0px,15px, 10px);">
                        @*<li><a target="_blank" href="@Url.Action("CSTaxInvoiceViewer.aspx","WForms/", new { id = Model.DocEntry })">Cash Tax Invoice [SRI]</a></li>*@
                        <li><a target="_blank" href="#" data-bind="click: printPreviewTax">Cash Tax Invoice [SRI]</a></li>
                        @*<li><a target="_blank" href="@Url.Action("CSViewer.aspx","WForms/", new { id = Model.DocEntry })">Delivery Order [SIN]</a></li>*@
                        <li><a target="_blank" href="#" data-bind="click: printPreview">Delivery Order [SIN]</a></li>
                    </ul>
                    <Button type="submit" Class="btn btn-primary" data-bind="click: validateAndSubmitToSAP, attr : {'disabled' : isDisabled}">Submit To SAP</Button>
                    <Button type="submit" Class="btn btn-primary" data-bind="click: validateAndSubmitToSAP, attr : {'disabled' : isDisabledResubmit}">Re-Submit To SAP</Button>
                </div>
            }
        </div>
    </div>
</div>
@section BootModals {
    @Html.Partial("_CashSalesLineDetailModal", new CashSalesLineViewModel() { });
    @Html.Partial("_CashSalesNoteDetailModal", new CashSalesNoteViewModel() { });
    @Html.Partial("_CashSalesPayDetailModal", new CashSalesPayViewModel() { });
}
@section Scripts {
    @Scripts.Render("~/DataTables")
    @Scripts.Render("~/bundles/Jquery-Validation-and-Ajax")
    @Scripts.Render("~/Select2")
    @Scripts.Render("~/DatePickerJS")
    @Scripts.Render("~/Knockout")

<script>
        function CashSalesViewModel(cashSales) {
            var self = this;
            self.isCreating = cashSales.docNum == "New";
            self.previewUrl = ko.observable('@Url.Action("CSViewer.aspx", "WForms/", new { id = Model.DocEntry })');
            self.previewUrlTax = ko.observable('@Url.Action("CSTaxInvoiceViewer.aspx", "WForms/", new { id = Model.DocEntry })');
            // Loaded from ajax - Observable Arrays
            self.CashCustomerNameCodes = ko.observableArray();
            self.CustomerContactPersons = ko.observableArray();
            self.ChildItemDetails = ko.observableArray();
            self.CustomerNameCodes = ko.observableArray();

            self.GLCodes = ko.observableArray();
            self.PaymentTypes = ko.observableArray();

            self.isDisabled = ko.observable(false);
            self.isDisabledResubmit = ko.observable(true);

            self.isEditingLine = false; // To prevent unit price change while clicking Edit line Button for the first time

            self.SalesPersons = ko.observableArray();
            self.ItemCodesAndNames = ko.observableArray();
            self.LocationCodeAndNames = ko.observableArray();
            self.TaxCodes = ko.observableArray();

            self.CustomerShipToAddresses = ko.observableArray();
            self.CustomerBillToAddresses = ko.observableArray();

            var LoadingFinished = true;
            if (!self.isCreating) {
                LoadingFinished = false;
            }

            self.CopyDescToOwDesc = function () {
                self.CashSalesLine.overwriteDescription($('#AddUpdateItemModal').find("#Description:first").find("option:selected").text());
            }

            self.LoadCustomerBasedDropdowns = function (cardcode) {

                    $.when(
                    // Initial Ajax Requests, while page loading
                    //Load Customer's ContactPersons
                    @*$.ajax({
                        url: "@Url.Action("GetContactPersons", "ContactPersons", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ CardCode: cardcode }),
                        success: function (data) {
                            self.CustomerContactPersons(data);

                        },
                        error: function () { }
                    }),*@
                    //Load Shipping Addresses
                    $.ajax({
                        url: "@Url.Action("GetCustomerShippingAddresses", "CustomerAddress", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ CardCode: cardcode }),
                        success: function (data) {

                            self.CustomerShipToAddresses(data);

                        },
                        error: function () { }
                    }),
                    //Load Billing Addresses
                    $.ajax({
                        url: "@Url.Action("GetCustomerBillingAddresses", "CustomerAddress", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ CardCode: cardcode }),
                        success: function (data) {

                            self.CustomerBillToAddresses(data);
                        },
                        error: function () { }
                    })
                    ).done(function () {

                            if (LoadingFinished === false) {


                                self.CashSales.billTo(cashSales.billTo);
                                $('#BillTo').val(cashSales.billTo).trigger('change');
                                self.CashSales.shipTo(cashSales.shipTo);
                                $('#ShipTo').val(cashSales.shipTo).trigger('change');

                                $.ajax({
                                                url: "@Url.Action("GetCustomerDetails", "Customer", null)",
                                                type: 'post',
                                                contentType: 'application/x-www-form-urlencoded',
                                                    data: ko.toJS({ CardCode: cardcode }),
                                success: function (data) {
                                                    $('#GstName').val(data.DefaultTaxGroup).trigger('change');
                                                },
                                                error: function () { }
                                            });

                                LoadingFinished = true;
                            }
                        else {
                            $.ajax({
                                                url: "@Url.Action("GetCustomerDetails", "Customer", null)",
                                                type: 'post',
                                                contentType: 'application/x-www-form-urlencoded',
                                                    data: ko.toJS({ CardCode: cardcode }),
                                                success: function (data) {

                                                    var PaymentTermsDays = parseInt(data.PaymentTermDays);

                                                    self.CashSales.officeTelNo(data.OfficeTelNo);

                                                    self.CashSales.currency(data.Currency);


                                                    self.CashSales.slpName(data.SlpName);


                                                    let BillToDefVal = data.BillToDef;
                                                    $('#BillTo').val("").trigger('change');
                                                    $('#BillTo').val(BillToDefVal).trigger('change');

                                                    let ShipToDefVal = data.ShipToDef;
                                                    $('#ShipTo').val("").trigger('change');
                                                    $('#ShipTo').val(ShipToDefVal).trigger('change');


                                                    $('#GstName').val(data.DefaultTaxGroup).trigger('change');




                                                },
                                                error: function () { }
                                            });
                        }


                });
            };


            // Model Binding
            self.CashSales = {
                docNum: ko.observable(cashSales.docNum),
                cardCode: ko.observable(cashSales.cardCode),
                paymentLocation: ko.observable(cashSales.paymentLocation),
                cardName: ko.observable(cashSales.cardName),
                currency: ko.observable(cashSales.currency),
                officeTelNo: ko.observable(cashSales.officeTelNo),
                cashSalesCardName: ko.observable(cashSales.cashSalesCardName),
                docDate: ko.observable(cashSales.docDate),
                deliveryTime: ko.observable(cashSales.deliveryTime),
                customerRef: ko.observable(cashSales.customerRef),
                deliveryDate: ko.observable(cashSales.deliveryDate),
                poNo: ko.observable(cashSales.poNo),
                printedStatus: ko.observable(cashSales.printedStatus),
                //paymentTermName: ko.observable(cashSales.paymentTermName),
                slpName: ko.observable(cashSales.slpName),
                exRate: ko.observable(cashSales.exRate),
                headerRemarks1: ko.observable(cashSales.headerRemarks1),
                headerRemarks2: ko.observable(cashSales.headerRemarks2),
                headerRemarks3: ko.observable(cashSales.headerRemarks3),
                headerRemarks4: ko.observable(cashSales.headerRemarks4),
                footerRemarks1: ko.observable(cashSales.footerRemarks1),
                footerRemarks2: ko.observable(cashSales.footerRemarks2),
                footerRemarks3: ko.observable(cashSales.footerRemarks3),
                footerRemarks4: ko.observable(cashSales.footerRemarks4),
                billTo: ko.observable(cashSales.billTo),
                billToAddress1: ko.observable(cashSales.billToAddress1),
                billToAddress2: ko.observable(cashSales.billToAddress2),
                billToAddress3: ko.observable(cashSales.billToAddress3),
                billToAddress4: ko.observable(cashSales.billToAddress4),
                billToAddress5: ko.observable(cashSales.billToAddress5),
                shipTo: ko.observable(cashSales.shipTo),
                shipToAddress1: ko.observable(cashSales.shipToAddress1),
                shipToAddress2: ko.observable(cashSales.shipToAddress2),
                shipToAddress3: ko.observable(cashSales.shipToAddress3),
                shipToAddress4: ko.observable(cashSales.shipToAddress4),
                shipToAddress5: ko.observable(cashSales.shipToAddress5),
                //selfCollect: ko.observable(cashSales.selfCollect),
                //selfCollectRemarks1: ko.observable(cashSales.selfCollectRemarks1),
                //selfCollectRemarks2: ko.observable(cashSales.selfCollectRemarks2),
                //selfCollectRemarks3: ko.observable(cashSales.selfCollectRemarks3),
                //selfCollectRemarks4: ko.observable(cashSales.selfCollectRemarks4),
                discByPercent: ko.observable(cashSales.discByPercent),
                discPercent: ko.observable(cashSales.discPercent),
                discAmount: ko.observable(cashSales.discAmount),
                grandTotal: ko.observable(parseFloat(cashSales.grandTotal).toFixed(2)),
                submittedToSAP: ko.observable(cashSales.submittedToSAP),
                syncStatus: ko.observable(cashSales.syncStatus),
                lines: ko.observableArray(cashSales.lines),
                noteLines: ko.observableArray(cashSales.noteLines),
                payLines: ko.observableArray(cashSales.payLines),
            }
            self.CashSales.currentPriceBand = ko.observable('');
            if (cashSales.printedStatus === 0) {
                self.CashSales.printedStatusName = ko.observable('Not Printed');
            }
            else {
                self.CashSales.printedStatusName = ko.observable('Printed');
            }
            self.CashSales.printedStatus.subscribe(function (newValue) {
                if (newValue === 0)
                    self.CashSales.printedStatusName('Not Printed');
                else
                    self.CashSales.printedStatusName('Printed');
            })
            self.printPreview = function () {
                self.CashSales.printedStatus(1);
                window.open(self.previewUrl(), '_blank');
            }
            self.printPreviewTax = function () {
                $.ajax({
                url: "@Url.Action("CanPrintInvoice", "CashSales", null)",
                type: 'post',
                contentType: 'application/x-www-form-urlencoded',
                    data: ko.toJS({ DocNumber: self.CashSales.docNum() }),
                success: function (data)
                {
                    if (data.canAccess) {
                        self.CashSales.printedStatus(1);
                        window.open(self.previewUrlTax(), '_blank');
                    }
                    else {
                        let form = $('form[id="CashSalesForm"]');
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                        $('<div class="alert alert-danger alert-dismissible"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button><h4><i class="icon fa fa-ban"></i> Alert!</h4><p>Access denied</p></div>')
                            .prependTo($(form))
                            .delay(5000)
                            .slideUpAndRemove('slow');
                    }

                },
                error: function ()
                {

                }
                });

            }


            self.BalancePay = ko.observable();
            //Calcuale Balance
            self.UpdateBalance = function () {
                let totalPaid = 0;
                self.CashSales.payLines().forEach(function (record) {
                    totalPaid += parseFloat(record.paidAmount);
                });
                self.BalancePay(parseFloat(self.CashSales.grandTotal() - totalPaid).toFixed(2));
            }
            self.UpdateBalance();

            self.isDisabled(self.CashSales.submittedToSAP());
            if (self.CashSales.syncStatus() == 3) { // Sync Failed
                self.isDisabledResubmit(false);
                if (self.isDisabled() === false) {
                    self.isDisabled(true);
                }
            }
            else {
                self.isDisabledResubmit(true);

            }
            //Total Calculation
            self.CashSales.netTotal = ko.computed(function () {
                var calculated = 0;
                if (self.CashSales.lines() !== null) {
                    for (var i = 0; i < self.CashSales.lines().length; i++) {
                        calculated = calculated + parseFloat(self.CashSales.lines()[i].lineTotal);
                    }
                }
                if (isNaN(calculated)) {
                    return 0;
                }
                else {
                    return roundToTwo(calculated);
                }
            }, self) //Computed observable
            self.CashSales.gstTotal = ko.computed(function () {
                var calculated = 0;
                var discAmt = 0;
                var disperc = 0;
                disperc = self.CashSales.discPercent();
                if (isNaN(disperc)) {
                    disperc = 0
                }
                if (self.CashSales.lines() !== null) {

                    let lines = ko.toJS(self.CashSales.lines());
                    let groupedLines = groupBy(lines, 'gstName');

                    Object.keys(groupedLines).forEach(key => {
                        let lineGroupTotal = 0;
                        for (var i = 0; i < groupedLines[key].length; i++) {
                            if (disperc > 0) {
                                discAmt = parseFloat(groupedLines[key][i].lineTotal) * parseFloat(disperc) / 100;
                            }
                            lineGroupTotal = parseFloat(roundToTwo(lineGroupTotal + parseFloat(roundToTwo((parseFloat(groupedLines[key][i].lineTotal) - discAmt)))));
                        }
                        calculated = calculated + (parseFloat(lineGroupTotal) * (parseFloat(groupedLines[key][0].gst) / 100));
                    });

                }
                if (isNaN(calculated)) {
                    return 0;
                }
                else {
                    return roundToTwo(calculated);
                }
            }, self) //Computed observable
            self.CashSales.netTotal.subscribe(function (newValue) {
                self.CalcDiscounts();
            }, self)
            self.CashSales.discPercent.subscribe(function (newValue) {
                self.CalcDiscounts();
            }, self)
            self.CashSales.discAmount.subscribe(function (newValue) {
                self.CalcDiscounts();
            }, self)
            self.CashSales.gstTotal.subscribe(function (newValue) {
                self.CalcTotals();
            }, self)

            self.CalcTotals = function () {
                var GrandTotal = 0;
                if (!isNaN(self.CashSales.netTotal()) && !isNaN(self.CashSales.discAmount()) && !isNaN(self.CashSales.gstTotal())) {
                    GrandTotal = parseFloat(self.CashSales.netTotal()) - parseFloat(self.CashSales.discAmount()) + parseFloat(self.CashSales.gstTotal());

                }
                if (isNaN(GrandTotal)) {
                    self.CashSales.grandTotal(0);
                }
                else {
                    GrandTotal = parseFloat(GrandTotal).toFixed(2);
                    self.CashSales.grandTotal(GrandTotal);
                }
                self.UpdateBalance();
            }
            self.CalcDiscounts = function () {

                if (self.CashSales.discByPercent() === "true") {

                    var calculated = 0;
                    if (!isNaN(self.CashSales.netTotal()) && !isNaN(self.CashSales.discPercent())) {
                        calculated = self.CashSales.netTotal() * (self.CashSales.discPercent() / 100);
                    }
                    if (isNaN(calculated)) {
                        self.CashSales.discAmount(0);
                    }
                    else {
                        calculated = roundToTwo(calculated);
                        self.CashSales.discAmount(calculated);
                    }
                }
                else {

                    var calculated = 0;
                    if (!isNaN(self.CashSales.netTotal()) && !isNaN(self.CashSales.discAmount())) {

                        calculated = (self.CashSales.discAmount() * 100) / self.CashSales.netTotal();
                    }
                    if (isNaN(calculated)) {
                        self.CashSales.discPercent(0);
                    }
                    else {
                        calculated = roundToTwo(calculated);
                        self.CashSales.discPercent(calculated);
                    }
                }

                self.CalcTotals();


            }
            //if (!self.isCreating) {   //uncommented becauase of setting the default customer from user settings
                self.LoadCustomerBasedDropdowns(self.CashSales.cardCode);
            //}


            var originalState = cashSales;

            //Single CashSalesLine Object Setup
            self.CashSalesLine = {
                lineNum: ko.observable(),
                itemCode: ko.observable(),
                description: ko.observable(),
                overwriteDescription: ko.observable(),
                description2: ko.observable(),
                description3: ko.observable(),
                description4: ko.observable(),
                description5: ko.observable(),
                description6: ko.observable(),
                serialNumber: ko.observable(),
                qty: ko.observable(),
                location: ko.observable(),
                locationText: '',
                unitPrice: ko.observable(),
                unitCost: ko.observable(),
                gstName: ko.observable(),
                gst: '',
            }
            //Single CashSalesNote Object Setup
            self.CashSalesNote = {
                lineNum: ko.observable(),
                note: ko.observable(),
            }
            //Single CashSalesPay Object Setup
            self.CashSalesPay = {
                lineNum: ko.observable(),
                gLCode: ko.observable(),
                gLName: ko.observable(),
                paymentType: ko.observable(),
                paidAmount: ko.observable(),
                paymentRemarks: ko.observable(),
                chequeNoReference: ko.observable(),
                payLocation:ko.observable()
            }
            self.CashSalesLine.lineTotal = ko.computed(function () {
                var calculated = parseFloat(self.CashSalesLine.qty()) * parseFloat(self.CashSalesLine.unitPrice());
                if (isNaN(calculated)) {
                    return 0;
                }
                else {
                    return roundToTwo(calculated);
                }
            }, self) //Computed observable


            // Add/Update/Delete CashSales Lines
            self.validateAndAddline = function (form) {
                if (!$(form).valid()) {
                    $('#AddUpdateItemModal').scrollTop(0);
                }
                else {
                    var lineNum = 0;
                    if (self.CashSales.lines() !== null) {
                        lineNum = self.CashSales.lines().length;
                    }

                    // Remove All li before submission, which he had in the previous validation
                    $(form).find(".validation-summary-errors ul li").remove();
                    $(form).find(".validation-summary-valid ul li").remove();
                    var InputDescription = $(form).find("#Description:first").find("option:selected").text();
                    var LocationText = $(form).find("#Location:first").find("option:selected").text();
                    var GstValue = 0;
                    for (var i = 0; i < self.TaxCodes.length; i++) {
                        if (self.TaxCodes[i].Text === self.CashSalesLine.gstName()) {
                            GstValue = self.TaxCodes[i].Value;
                        }
                    }

                    if (self.CashSalesLine.lineNum() === "") {
                        self.CashSales.lines.push({
                            lineNum: lineNum,
                            itemCode: self.CashSalesLine.itemCode(),
                            description: InputDescription,
                            overwriteDescription: self.CashSalesLine.overwriteDescription(),
                            description2: self.CashSalesLine.description2(),
                            description3: self.CashSalesLine.description3(),
                            description4: self.CashSalesLine.description4(),
                            description5: self.CashSalesLine.description5(),
                            description6: self.CashSalesLine.description6(),
                            serialNumber: self.CashSalesLine.serialNumber(),
                            qty: parseFloat(self.CashSalesLine.qty()).toFixed(3),
                            location: self.CashSalesLine.location(),
                            locationText: LocationText,
                            unitPrice: parseFloat(self.CashSalesLine.unitPrice()).toFixed(4),
                            unitCost: parseFloat(self.CashSalesLine.unitCost()).toFixed(4),
                            gstName: self.CashSalesLine.gstName(),
                            gst: GstValue,
                            lineTotal: parseFloat(self.CashSalesLine.lineTotal()).toFixed(2),
                        });
                    }
                    else {
                        var LineIndex = parseInt(self.CashSalesLine.lineNum());

                        self.CashSales.lines.replace(self.CashSales.lines()[LineIndex], {
                            lineNum: self.CashSalesLine.lineNum(),
                            itemCode: self.CashSalesLine.itemCode(),
                            description: InputDescription,
                            overwriteDescription: self.CashSalesLine.overwriteDescription(),
                            description2: self.CashSalesLine.description2(),
                            description3: self.CashSalesLine.description3(),
                            description4: self.CashSalesLine.description4(),
                            description5: self.CashSalesLine.description5(),
                            description6: self.CashSalesLine.description6(),
                            serialNumber: self.CashSalesLine.serialNumber(),
                            qty: parseFloat(self.CashSalesLine.qty()).toFixed(3),
                            location: self.CashSalesLine.location(),
                            locationText: LocationText,
                            unitPrice: parseFloat(self.CashSalesLine.unitPrice()).toFixed(4),
                            unitCost: parseFloat(self.CashSalesLine.unitCost()).toFixed(4),
                            gstName: self.CashSalesLine.gstName(),
                            gst: GstValue,
                            lineTotal: parseFloat(self.CashSalesLine.lineTotal()).toFixed(2),
                        });
                    }
                }
            }
            self.editCashSalesLine = function (rowid, data, event) {

                var clickedRowId = parseInt(rowid);
                if (clickedRowId < self.CashSales.lines().length) {
                    self.CashSalesLine.lineNum(clickedRowId);

                    self.isEditingLine = true;

                    var itemcode = self.CashSales.lines()[clickedRowId].itemCode;
                    $('#ItemCode').val(itemcode).trigger('change');

                    self.CashSalesLine.itemCode(itemcode);
                    self.CashSalesLine.description(itemcode);
                    self.CashSalesLine.overwriteDescription(self.CashSales.lines()[clickedRowId].overwriteDescription);
                    self.CashSalesLine.description2(self.CashSales.lines()[clickedRowId].description2);
                    self.CashSalesLine.description3(self.CashSales.lines()[clickedRowId].description3);
                    self.CashSalesLine.description4(self.CashSales.lines()[clickedRowId].description4);
                    self.CashSalesLine.description5(self.CashSales.lines()[clickedRowId].description5);
                    self.CashSalesLine.description6(self.CashSales.lines()[clickedRowId].description6);
                    self.CashSalesLine.serialNumber(self.CashSales.lines()[clickedRowId].serialNumber);
                    self.isEditingLine = true; //Qty Change for the first should not load the price, So Resetting the flag
                    self.CashSalesLine.qty(parseFloat(self.CashSales.lines()[clickedRowId].qty).toFixed(3));

                    var location = self.CashSales.lines()[clickedRowId].location;
                    self.CashSalesLine.location(location);
                    $('#Location').val(location).trigger('change');

                    self.CashSalesLine.unitPrice(parseFloat(self.CashSales.lines()[clickedRowId].unitPrice).toFixed(4));
                    self.CashSalesLine.unitCost(parseFloat(self.CashSales.lines()[clickedRowId].unitCost).toFixed(4));
                    var gstName = self.CashSales.lines()[clickedRowId].gstName;
                    self.CashSalesLine.gstName(gstName);
                    $('#GstName').val(gstName).trigger('change');

                    //self.CashSalesLine.lineTotal(self.CashSalesLine.lineTotal); //Computed automatically
                    $('#AddUpdateItemModal').modal('show');
                }
            }
            self.addCashSalesLine = function () {
                $('#AddUpdateItemModal').modal('show');
                self.InitializeCashSalesLine();
            }
            self.deleteCashSalesLine = function (rowid, data, event) {
                var clickedRowId = parseInt(rowid);

                if (clickedRowId < self.CashSales.lines().length) {
                    self.CashSales.lines.remove(self.CashSales.lines()[clickedRowId]);

                }


                var table = $('#ItemListTable').DataTable();

                if (self.CashSales.lines().length > 0) {
                    table.clear();

                    var i;
                    for (i = 0; i < self.CashSales.lines().length; i++) {

                        var AddtionalRemarks = '';
                        var defaultDescription = '-';
                        if (self.CashSales.lines()[i].overwriteDescription === null) {
                            defaultDescription = self.CashSales.lines()[i].description;
                        }
                        else if (self.CashSales.lines()[i].overwriteDescription === "") {
                            defaultDescription = self.CashSales.lines()[i].description;
                        }
                        else {
                            defaultDescription = self.CashSales.lines()[i].overwriteDescription;
                        }
                        if (self.CashSales.lines()[i].description2 !== null) {
                            if (self.CashSales.lines()[i].description2 !== "") {
                                AddtionalRemarks = AddtionalRemarks + self.CashSales.lines()[i].description2 + "<br/>"
                            }
                        }
                        if (self.CashSales.lines()[i].description3 !== null) {
                            if (self.CashSales.lines()[i].description3 !== "") {
                                AddtionalRemarks = AddtionalRemarks + self.CashSales.lines()[i].description3 + "<br/>"
                            }
                        }
                        if (self.CashSales.lines()[i].description4 !== null) {
                            if (self.CashSales.lines()[i].description4 !== "") {
                                AddtionalRemarks = AddtionalRemarks + self.CashSales.lines()[i].description4 + "<br/>"
                            }
                        }
                        if (self.CashSales.lines()[i].description5 !== null) {
                            if (self.CashSales.lines()[i].description5 !== "") {
                                AddtionalRemarks = AddtionalRemarks + self.CashSales.lines()[i].description5 + "<br/>"
                            }
                        }
                        if (self.CashSales.lines()[i].description6 !== null) {
                            if (self.CashSales.lines()[i].description6 !== "") {
                                AddtionalRemarks = AddtionalRemarks + self.CashSales.lines()[i].description6 + "<br/>"
                            }
                        }
                        defaultDescription = defaultDescription + "<span data-toggle='popover' data-trigger='hover' data-placement='top' data-html='true' data-content='" + AddtionalRemarks + "' data-title='Additional Remarks'><i class='fa fa-fw fa-info-circle'></i></span>";

                        var rowNode = table.row.add([
                            i + 1,
                            self.CashSales.lines()[i].itemCode,
                            defaultDescription,
                            self.CashSales.lines()[i].qty,
                            self.CashSales.lines()[i].locationText,
                            self.CashSales.lines()[i].unitPrice,
                            self.CashSales.lines()[i].gstName,
                            self.CashSales.lines()[i].lineTotal,
                            "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesLine("
                            + i + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                        ]).draw().node();
                        $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editCashSalesLine(" + i + ", data, event) } }");
                        ko.applyBindings(self, rowNode);
                    }

                }
                else {
                    table.clear().draw();
                }



                ////Deletes Row from html table and by calling draw datatable will be redrawn
                //var table = $('#ItemListTable').DataTable();
                //table.row(clickedRowId).remove().draw();

            }
            self.InitializeCashSalesLine = function () {
                self.CashSalesLine.lineNum('');
                self.CashSalesLine.itemCode('');
                self.CashSalesLine.description('');
                self.CashSalesLine.overwriteDescription('');
                self.CashSalesLine.description2('');
                self.CashSalesLine.description3('');
                self.CashSalesLine.description4('');
                self.CashSalesLine.description5('');
                self.CashSalesLine.description6('');
                self.CashSalesLine.serialNumber('');
                self.CashSalesLine.qty('');
                self.CashSalesLine.location('@PreferredLocation');
                $('#Location').val('@PreferredLocation').trigger('change');
                self.CashSalesLine.unitPrice('');
                self.CashSalesLine.unitCost('');
                //self.CashSalesLine.gstName('');
                //$('#GstName').val('').trigger('change');
            }
            //Data Table operations
            self.CashSales.lines.subscribe(function (changes) {


                // Add Lines
                if (changes[0].status === "deleted") {


                }
                else if (self.CashSalesLine.lineNum() === "") {

                    var AddtionalRemarks = '';
                    var defaultDescription = '-';
                    if (changes[0].value.overwriteDescription === null) {
                        defaultDescription = changes[0].value.description;
                    }
                    else if (changes[0].value.overwriteDescription === "") {
                        defaultDescription = changes[0].value.description;
                    }
                    else {
                        defaultDescription = changes[0].value.overwriteDescription;
                    }
                    if (changes[0].value.description2 !== null) {
                        if (changes[0].value.description2 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description2 + "<br/>"
                        }
                    }
                    if (changes[0].value.description3 !== null) {
                        if (changes[0].value.description3 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description3 + "<br/>"
                        }
                    }
                    if (changes[0].value.description4 !== null) {
                        if (changes[0].value.description4 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description4 + "<br/>"
                        }
                    }
                    if (changes[0].value.description5 !== null) {
                        if (changes[0].value.description5 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description5 + "<br/>"
                        }
                    }
                    if (changes[0].value.description6 !== null) {
                        if (changes[0].value.description6 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description6 + "<br/>"
                        }
                    }
                    defaultDescription = defaultDescription + "<span data-toggle='popover' data-trigger='hover' data-placement='top' data-html='true' data-content='" + AddtionalRemarks + "' data-title='Additional Remarks'><i class='fa fa-fw fa-info-circle'></i></span>";


                    var table = $('#ItemListTable').DataTable();
                    var rowNode = table.row.add([
                        changes[0].index + 1,
                        changes[0].value.itemCode,
                        defaultDescription,
                        changes[0].value.qty,
                        changes[0].value.locationText,
                        changes[0].value.unitPrice,
                        changes[0].value.gstName,
                        changes[0].value.lineTotal,
                        "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesLine("
                        + changes[0].index + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                    ]).draw().node();
                    $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editCashSalesLine(" + changes[0].index + ", data, event) } }");

                    ko.applyBindings(self, rowNode);
                } //Update Lines
                else {
                    var AddtionalRemarks = '';
                    var defaultDescription = '-';
                    if (changes[0].value.overwriteDescription === null) {
                        defaultDescription = changes[0].value.description;
                    }
                    else if (changes[0].value.overwriteDescription === "") {
                        defaultDescription = changes[0].value.description;
                    }
                    else {
                        defaultDescription = changes[0].value.overwriteDescription;
                    }
                    if (changes[0].value.description2 !== null) {
                        if (changes[0].value.description2 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description2 + "<br/>"
                        }
                    }
                    if (changes[0].value.description3 !== null) {
                        if (changes[0].value.description3 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description3 + "<br/>"
                        }
                    }
                    if (changes[0].value.description4 !== null) {
                        if (changes[0].value.description4 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description4 + "<br/>"
                        }
                    }
                    if (changes[0].value.description5 !== null) {
                        if (changes[0].value.description5 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description5 + "<br/>"
                        }
                    }
                    if (changes[0].value.description6 !== null) {
                        if (changes[0].value.description6 !== "") {
                            AddtionalRemarks = AddtionalRemarks + changes[0].value.description6 + "<br/>"
                        }
                    }
                    defaultDescription = defaultDescription + "<span data-toggle='popover' data-trigger='hover' data-placement='top' data-html='true' data-content='" + AddtionalRemarks + "' data-title='Additional Remarks'><i class='fa fa-fw fa-info-circle'></i></span>";


                    var table = $('#ItemListTable').DataTable();
                    var LineIndex = parseInt(self.CashSalesLine.lineNum());
                    var rowNode = table.row(LineIndex).data([
                        changes[0].index + 1,
                        changes[0].value.itemCode,
                        defaultDescription,
                        changes[0].value.qty,
                        changes[0].value.locationText,
                        changes[0].value.unitPrice,
                        changes[0].value.gstName,
                        changes[0].value.lineTotal,
                        "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesLine("
                        + changes[0].index + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                    ]).draw().node();

                    table.columns.adjust().draw();
                    ko.cleanNode(rowNode);
                    ko.applyBindings(self, rowNode);
                    //ko.applyBindings(CashSalesVM, rowNode);
                }

                $('#AddUpdateItemModal').modal('hide');

            }, self, "arrayChange");



            // Add/Update/Delete CashSales Notes
            self.InitializeCashSalesNote = function () {
                self.CashSalesNote.lineNum('');
                self.CashSalesNote.note('');
            }
            self.validateAndAddNote = function (form) {
                if (!$(form).valid()) {

                    $('#AddUpdateNoteModal').scrollTop(0);
                }
                else {

                    var lineNum = 0;
                    if (self.CashSales.noteLines() !== null) {
                        lineNum = self.CashSales.noteLines().length;
                    }

                    if (self.CashSalesNote.lineNum() === "") {
                        self.CashSales.noteLines.push({
                            lineNum: lineNum,
                            note: self.CashSalesNote.note(),
                        });
                    }
                    else {

                        var LineIndex = parseInt(self.CashSalesNote.lineNum());

                        self.CashSales.noteLines.replace(self.CashSales.noteLines()[LineIndex], {
                            lineNum: self.CashSalesNote.lineNum(),
                            note: self.CashSalesNote.note(),
                        });
                    }
                }
            }
            self.CashSales.noteLines.subscribe(function (changes) {

                if (changes[0].status === "deleted") {


                }
                else if (self.CashSalesNote.lineNum() === "") {

                    var table = $('#NoteListTable').DataTable();
                    var rowNode = table.row.add([
                        changes[0].index + 1,
                        changes[0].value.note,
                        "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesNote("
                        + changes[0].index + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                    ]).draw().node();
                    $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editCashSalesNote(" + changes[0].index + ", data, event) } }");
                    ko.applyBindings(self, rowNode);
                } //Update Lines
                else {

                    var table = $('#NoteListTable').DataTable();
                    var LineIndex = parseInt(self.CashSalesNote.lineNum());
                    var rowNode = table.row(LineIndex).data([
                        changes[0].index + 1,
                        changes[0].value.note,
                        "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesNote("
                        + changes[0].index + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                    ]).draw().node();

                    table.columns.adjust().draw();
                    ko.cleanNode(rowNode);
                    ko.applyBindings(self, rowNode);
                }


                $('#AddUpdateNoteModal').modal('hide');

            }, self, "arrayChange");
            self.editCashSalesNote = function (rowid, data, event) {

                var clickedRowId = parseInt(rowid);
                if (clickedRowId < self.CashSales.noteLines().length) {
                    self.CashSalesNote.lineNum(clickedRowId);
                    self.CashSalesNote.note(self.CashSales.noteLines()[clickedRowId].note);

                    //self.CashSalesLine.lineTotal(self.CashSalesLine.lineTotal); //Computed automatically
                    $('#AddUpdateNoteModal').modal('show');
                }
            }
            self.addCashSalesNote = function () {
                $('#AddUpdateNoteModal').modal('show');
                self.InitializeCashSalesNote();
            }
            self.deleteCashSalesNote = function (rowid, data, event) {
                var clickedRowId = parseInt(rowid);

                if (clickedRowId < self.CashSales.noteLines().length) {
                    self.CashSales.noteLines.remove(self.CashSales.noteLines()[clickedRowId]);

                }


                var table = $('#NoteListTable').DataTable();

                if (self.CashSales.noteLines().length > 0) {
                    table.clear();

                    var i;
                    for (i = 0; i < self.CashSales.noteLines().length; i++) {

                        var rowNode = table.row.add([
                            i + 1,
                            self.CashSales.noteLines()[i].note,
                            "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesNote("
                            + i + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                        ]).draw().node();
                        $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editCashSalesNote(" + i + ", data, event) } }");
                        ko.applyBindings(self, rowNode);
                    }

                }
                else {
                    table.clear().draw();
                }





            }

            // Add/Update/Delete CashSales Pays
            self.InitializeCashSalesPay = function () {

                self.CashSalesPay.lineNum('');
                self.CashSalesPay.gLCode(@defaultGLCode);
                $('#GLCode').val(@defaultGLCode).trigger('change');
                self.CashSalesPay.gLName('');
                self.CashSalesPay.paymentType('');
                $('#PaymentType').val('').trigger('change');
                self.CashSalesPay.paidAmount(parseFloat(0).toFixed(2));
                self.CashSalesPay.paymentRemarks('');
                self.CashSalesPay.chequeNoReference('');
                self.CashSalesPay.payLocation('@PreferredLocation');                       
                $('#PayLocation').val('@PreferredLocation').trigger('change');
            }
            self.validateAndAddPay = function (form) {
                if (!$(form).valid()) {

                    $('#AddUpdatePayModal').scrollTop(0);
                }
                else {

                    var lineNum = 0;
                    if (self.CashSales.payLines() !== null) {
                        lineNum = self.CashSales.payLines().length;
                    }
                    var GLDescription = $("#GLCode:first").find("option:selected").text();
                    if (self.CashSalesPay.lineNum() === "") {
                        self.CashSales.payLines.push({
                            lineNum: lineNum,
                            gLCode: self.CashSalesPay.gLCode(),
                            gLName: GLDescription,
                            paymentType: self.CashSalesPay.paymentType(),
                            paidAmount: parseFloat(self.CashSalesPay.paidAmount()).toFixed(2),
                            paymentRemarks: self.CashSalesPay.paymentRemarks(),
                            chequeNoReference: self.CashSalesPay.chequeNoReference(),
                            payLocation: self.CashSalesPay.payLocation()
                        });
                    }
                    else {

                        var LineIndex = parseInt(self.CashSalesPay.lineNum());

                        self.CashSales.payLines.replace(self.CashSales.payLines()[LineIndex], {
                            lineNum: self.CashSalesPay.lineNum(),
                            gLCode: self.CashSalesPay.gLCode(),
                            gLName: GLDescription,
                            paymentType: self.CashSalesPay.paymentType(),
                            paidAmount: parseFloat(self.CashSalesPay.paidAmount()).toFixed(2),
                            paymentRemarks: self.CashSalesPay.paymentRemarks(),
                            chequeNoReference: self.CashSalesPay.chequeNoReference(),
                            payLocation: self.CashSalesPay.payLocation()
                        });
                    }
                }
            }

            self.CashSales.payLines.subscribe(function (changes) {



                if (changes[0].status === "deleted") {



                }
                else if (self.CashSalesPay.lineNum() === "") {

                    var table = $('#PayListTable').DataTable();
                    var rowNode = table.row.add([
                        changes[0].index + 1,
                        changes[0].value.gLName,
                        getDropDownText(self.PaymentTypes, changes[0].value.paymentType),
                        parseFloat(changes[0].value.paidAmount).toFixed(2),
                        changes[0].value.paymentRemarks,
                        changes[0].value.chequeNoReference,
                        getDropDownText(self.LocationCodeAndNames, changes[0].value.payLocation),
                        "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesPay("
                        + changes[0].index + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                    ]).draw().node();
                    $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editCashSalesPay(" + changes[0].index + ", data, event) } }");
                    ko.applyBindings(self, rowNode);
                } //Update Lines
                else {

                    var table = $('#PayListTable').DataTable();
                    var LineIndex = parseInt(self.CashSalesPay.lineNum());
                    var rowNode = table.row(LineIndex).data([
                        changes[0].index + 1,
                        changes[0].value.gLName,
                        getDropDownText(self.PaymentTypes, changes[0].value.paymentType),
                        parseFloat(changes[0].value.paidAmount).toFixed(2),
                        changes[0].value.paymentRemarks,
                        changes[0].value.chequeNoReference,
                        getDropDownText(self.LocationCodeAndNames, changes[0].value.payLocation),
                        "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesPay("
                        + changes[0].index + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                    ]).draw().node();

                    table.columns.adjust().draw();
                    ko.cleanNode(rowNode);
                    ko.applyBindings(self, rowNode);
                }


                $('#AddUpdatePayModal').modal('hide');
                self.UpdateBalance();

            }, self, "arrayChange");
            self.editCashSalesPay = function (rowid, data, event) {

                var clickedRowId = parseInt(rowid);
                if (clickedRowId < self.CashSales.payLines().length) {
                    self.CashSalesPay.lineNum(clickedRowId);
                    self.CashSalesPay.gLCode(self.CashSales.payLines()[clickedRowId].gLCode);
                    $('#GLCode').val(self.CashSales.payLines()[clickedRowId].gLCode).trigger('change');
                    self.CashSalesPay.gLName(self.CashSales.payLines()[clickedRowId].gLName);
                    self.CashSalesPay.paymentType(self.CashSales.payLines()[clickedRowId].paymentType);
                    $('#PaymentType').val(self.CashSales.payLines()[clickedRowId].paymentType).trigger('change');
                    self.CashSalesPay.paidAmount(parseFloat(self.CashSales.payLines()[clickedRowId].paidAmount).toFixed(2));
                    self.CashSalesPay.paymentRemarks(self.CashSales.payLines()[clickedRowId].paymentRemarks);
                    self.CashSalesPay.chequeNoReference(self.CashSales.payLines()[clickedRowId].chequeNoReference);
                    self.CashSalesPay.payLocation(self.CashSales.payLines()[clickedRowId].payLocation);
                    $('#PayLocation').val(self.CashSales.payLines()[clickedRowId].payLocation).trigger('change');

                    //self.CashSalesLine.lineTotal(self.CashSalesLine.lineTotal); //Computed automatically
                    $('#AddUpdatePayModal').modal('show');
                }
            }
            self.addCashSalesPay = function () {
                $('#AddUpdatePayModal').modal('show');
                self.InitializeCashSalesPay();
            }
            self.deleteCashSalesPay = function (rowid, data, event) {
                var clickedRowId = parseInt(rowid);

                if (clickedRowId < self.CashSales.payLines().length) {
                    self.CashSales.payLines.remove(self.CashSales.payLines()[clickedRowId]);

                }


                var table = $('#PayListTable').DataTable();

                if (self.CashSales.payLines().length > 0) {
                    table.clear();

                    var i;
                    for (i = 0; i < self.CashSales.payLines().length; i++) {


                        var rowNode = table.row.add([
                            i + 1,
                            self.CashSales.payLines()[i].gLName,
                            self.CashSales.payLines()[i].paymentType,
                            parseFloat(self.CashSales.payLines()[i].paidAmount).toFixed(2),
                            self.CashSales.payLines()[i].paymentRemarks,
                            self.CashSales.payLines()[i].chequeNoReference,
                            self.CashSales.payLines()[i].payLocation,
                            "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesPay("
                            + i + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                        ]).draw().node();
                        $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editCashSalesPay(" + i + ", data, event) } }");
                        ko.applyBindings(self, rowNode);
                    }

                }
                else {
                    table.clear().draw();
                }





            }

             // on Change of ItemCode - ItemName value will be selected
            self.CashSalesLine.itemCode.subscribe(function (newValue) {
                //self.CashSalesLine.description(newValue);
                // Above statement is enough to trigger the change of selection in knockout
                // because of select2 is used we have to use below statement to trigger the change of selection
                $('#Description').val(newValue).trigger('change');
                self.LoadItemDetails();
            });

            self.CashSalesLine.qty.subscribe(function (newValue) {
                if (self.isEditingLine == false) { //Qty Change for the first should not load the price
                    self.LoadItemSpecialPrice();
                }
                else {
                    self.isEditingLine = false;
                }
            });
            self.LoadItemSpecialPrice = function () {

                        let Qty = 0;

                        if (typeof self.CashSalesLine.qty() === 'undefined') {
                            Qty = 0;
                        }
                        else if (self.CashSalesLine.qty() == '') {
                            Qty = 0;
                        }
                        else {
                            Qty = self.CashSalesLine.qty();
                        }


                        $.ajax({
                                url: "@Url.Action("GetItemSpecialPrice", "Item", null)",
                                type: 'post',
                                contentType: 'application/x-www-form-urlencoded',
                            data: ko.toJS({ ItemCode: self.CashSalesLine.itemCode(), CardCode: self.CashSales.cardCode(), Quantity: Qty }),
                                success: function (data) {
                                    //if (jQuery.type(self.CashSalesLine.location()) == "undefined" || jQuery.type(self.CashSalesLine.location()) == "") {
                                        //let DefaultTaxVal = data.DefaultTax;
                                        //$('#GstName').val(DefaultTaxVal).trigger('change');
                                        self.CashSalesLine.unitPrice(parseFloat(data).toFixed(4));
                                    //}
                                },
                                error: function () { }
                        });
            }
            self.LoadItemDetails = function () {
                if (self.CashSalesLine.itemCode() !== null) {
                    var LocationStocktable = $('#LocationStock').DataTable();
                    LocationStocktable.clear().draw();
                    $.ajax({
                        url: "@Url.Action("GetLocationStockQty", "Item", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ ItemCode: self.CashSalesLine.itemCode() }),
                        success: function (data) {

                            var LocStockLines = data;
                            if (LocStockLines !== null) {

                                for (var i = 0; i < LocStockLines.length; i++) {
                                    LocationStocktable.row.add([
                                        LocStockLines[i].WarhouseName,
                                        parseFloat(LocStockLines[i].AvailableQty).toFixed(3),
                                    ]).draw().node();
                                }
                            }

                        },
                        error: function () { }
                    });

                    var PriceHistorytable = $('#PriceHistory').DataTable();
                    PriceHistorytable.clear().draw();
                    $.ajax({
                        url: "@Url.Action("GetCashSalesLastPriceHistory", "CashSales", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ ItemCode: self.CashSalesLine.itemCode(), CardCode: self.CashSales.cardCode() }),
                        success: function (data) {

                            var PriceHistoryLines = data;
                            if (PriceHistoryLines !== null) {

                                for (var i = 0; i < PriceHistoryLines.length; i++) {
                                    PriceHistorytable.row.add([
                                        PriceHistoryLines[i].DocDate,
                                        PriceHistoryLines[i].DocNum,
                                        parseFloat(PriceHistoryLines[i].Qty).toFixed(3),
                                        parseFloat(PriceHistoryLines[i].UnitPrice).toFixed(4),
                                    ]).draw().node();
                                }
                            }

                        },
                        error: function () { }
                    });

                     var PriceBreaktable = $('#PriceBreak').DataTable();
                    PriceBreaktable.clear().draw();
                    if (self.CashSalesLine.itemCode() !== "" && self.CashSales.cardCode() !== "") {
                         $.ajax({
                            url: "@Url.Action("GetCustomerSpecialPriceWithPriceListName", "ItemSpecialPrice", null)",
                            type: 'post',
                            contentType: 'application/x-www-form-urlencoded',
                            data: ko.toJS({ ItemCode: self.CashSalesLine.itemCode(), CardCode: self.CashSales.cardCode() }),
                            success: function (data) {
                               
                                //console.log(data.Name)
                                self.CashSales.currentPriceBand(data.Name);
                                var PriceBreakLines = data.Lines;
                                if (PriceBreakLines !== null) {
                                    
                                    for (var i = 0; i < PriceBreakLines.length  ; i++) {
                                        if (i === 0) {
                                            PriceBreaktable.row.add([
                                                data.Name,
                                                parseFloat(PriceBreakLines[i].Amount).toFixed(3),
                                                parseFloat(PriceBreakLines[i].Price).toFixed(4),
                                            ]).draw().node();
                                        }
                                        else if (i === 1) {
                                            PriceBreaktable.row.add([
                                                parseFloat(data.NormalPrice).toFixed(4),
                                                parseFloat(PriceBreakLines[i].Amount).toFixed(3),
                                                parseFloat(PriceBreakLines[i].Price).toFixed(4),
                                            ]).draw().node();
                                        }
                                        else {
                                            PriceBreaktable.row.add([
                                                '',
                                                parseFloat(PriceBreakLines[i].Amount).toFixed(3),
                                                parseFloat(PriceBreakLines[i].Price).toFixed(4),
                                            ]).draw().node();
                                        }
                                    }
                                    if (PriceBreakLines.length === 0) {                                        
                                        PriceBreaktable.row.add([
                                            data.Name,
                                            '',
                                            '',
                                        ]).draw().node();
                                    }
                                    if (PriceBreakLines.length === 0 || PriceBreakLines.length === 1) {                                        
                                        PriceBreaktable.row.add([
                                            parseFloat(data.NormalPrice).toFixed(4),
                                            '',
                                            '',
                                        ]).draw().node();
                                    }
                                   
                                }

                            },
                            error: function () { }
                        });
                    }
                       


                    $.ajax({
                        url: "@Url.Action("GetItemDefaultWhs", "Item", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ ItemCode: self.CashSalesLine.itemCode() }),
                        success: function (data) {

                            if (jQuery.type(self.CashSalesLine.location()) == "undefined") {
                                let LocationCodeVal = data.DefaultWhs;
                                $('#Location').val(LocationCodeVal).trigger('change');
                            }
                            else if (self.CashSalesLine.location() == '') {
                                let LocationCodeVal = data.DefaultWhs;
                                $('#Location').val(LocationCodeVal).trigger('change');
                            }

                        },
                        error: function () { }
                    });

                      $.ajax({
                            url: "@Url.Action("GetItemDetails", "Item", null)",
                            type: 'post',
                            contentType: 'application/x-www-form-urlencoded',
                            data: ko.toJS({ ItemCode: self.CashSalesLine.itemCode() }),
                            success: function (data) {

                                let DefaultTaxVal = data.DefaultTax;
                                $('#GstName').val(DefaultTaxVal).trigger('change');

                            },
                            error: function () { }
                      });

                    if (self.isEditingLine == false) {

                        self.LoadItemSpecialPrice();
                        $.ajax({
                                url: "@Url.Action("GetLastGRPOPrice", "GRPO", null)",
                                type: 'post',
                                contentType: 'application/x-www-form-urlencoded',
                            data: ko.toJS({ ItemCode: self.CashSalesLine.itemCode(), CardCode: self.CashSales.cardCode()}),
                                success: function (data) {
                                    //if (jQuery.type(self.CashSalesLine.location()) == "undefined" || jQuery.type(self.CashSalesLine.location()) == "") {
                                        //let DefaultTaxVal = data.DefaultTax;
                                        //$('#GstName').val(DefaultTaxVal).trigger('change');
                                    self.CashSalesLine.unitCost(parseFloat(data).toFixed(4));
                                    //}
                                },
                                error: function () { }
                        });
                    }
                    else {
                        self.isEditingLine = false;
                    }
                    $.ajax({
                            url: "@Url.Action("GetChildItems", "Item", null)",
                            type: 'post',
                            contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ ParentItemCode: self.CashSalesLine.itemCode() }),
                            success: function (data) {
                                    self.ChildItemDetails(data);
                            },
                            error: function () { }
                        });

                }
            }

            // on Change of ItemName - ItemCode value will be selected
            self.CashSalesLine.description.subscribe(function (newValue) {
                //self.CashSalesLine.itemCode(newValue);
                // Above statement is enough to trigger the change of selection in knockout
                // because of select2 is used we have to use below statement to trigger the change of selection
                $('#ItemCode').val(newValue).trigger('change');
            });

            // Initialize Add/Update CashSales Model to the Initial State of page loaded first
            self.Initialize = function () { // Used to initialize Form



                self.CashSales.cardCode(originalState.cardCode);
                $('#CardCode').val(originalState.cardCode).trigger('change');
                self.CashSales.cardName(originalState.cardName);
                $('#CardName').val(originalState.cardName).trigger('change');
                self.CashSales.currency(originalState.currency);
                self.CashSales.officeTelNo(originalState.officeTelNo);
                $('#OfficeTelNo').val(originalState.officeTelNo).trigger('change');

                self.CashSales.cashSalesCardName(originalState.cashSalesCardName);
                $('#CashSalesCardName').val(originalState.cashSalesCardName).trigger('change');

                self.CashSales.cardCode(originalState.paymentLocation);
                $('#PaymentLocation').val(originalState.paymentLocation).trigger('change');

                self.CashSales.docDate(originalState.docDate);
                self.CashSales.deliveryTime(originalState.deliveryTime);
                self.CashSales.customerRef(originalState.customerRef);
                self.CashSales.deliveryDate(originalState.deliveryDate);
                self.CashSales.poNo(originalState.poNo);

                //self.CashSales.paymentTermName(originalState.paymentTermName);


                self.CashSales.slpName(originalState.slpName);



                self.CashSales.exRate(originalState.exRate);
                self.CashSales.headerRemarks1(originalState.headerRemarks1);
                self.CashSales.headerRemarks2(originalState.headerRemarks2);
                self.CashSales.headerRemarks3(originalState.headerRemarks3);
                self.CashSales.headerRemarks4(originalState.headerRemarks4);
                self.CashSales.footerRemarks1(originalState.footerRemarks1);
                self.CashSales.footerRemarks2(originalState.footerRemarks2);
                self.CashSales.footerRemarks3(originalState.footerRemarks3);
                self.CashSales.footerRemarks4(originalState.footerRemarks4);
                self.CashSales.billTo(originalState.billTo);
                $('#BillTo').val(originalState.billTo).trigger('change');
                self.CashSales.billToAddress1(originalState.billToAddress1);
                self.CashSales.billToAddress2(originalState.billToAddress2);
                self.CashSales.billToAddress3(originalState.billToAddress3);
                self.CashSales.billToAddress4(originalState.billToAddress4);
                self.CashSales.billToAddress5(originalState.billToAddress5);
                self.CashSales.shipTo(originalState.shipTo);
                $('#ShipTo').val(originalState.shipTo).trigger('change');
                self.CashSales.shipToAddress1(originalState.shipToAddress1);
                self.CashSales.shipToAddress2(originalState.shipToAddress2);
                self.CashSales.shipToAddress3(originalState.shipToAddress3);
                self.CashSales.shipToAddress4(originalState.shipToAddress4);
                self.CashSales.shipToAddress4(originalState.shipToAddress5);
                //self.CashSales.selfCollect(originalState.selfCollect);
                //self.CashSales.selfCollectRemarks1(originalState.selfCollectRemarks1);
                //self.CashSales.selfCollectRemarks2(originalState.selfCollectRemarks2);
                //self.CashSales.selfCollectRemarks3(originalState.selfCollectRemarks3);
                //self.CashSales.selfCollectRemarks4(originalState.selfCollectRemarks4);

                self.CashSales.discByPercent(originalState.discByPercent);
                self.CashSales.discPercent(originalState.discPercent);
                self.CashSales.discAmount(originalState.discAmount);
                self.CashSales.grandTotal(originalState.grandTotal);



                if (originalState.lines !== null) {
                    //Original state lines are not nul
                    self.CashSales.lines(originalState.lines);
                }
                else {
                    //Original state lines are null

                    self.CashSales.lines.removeAll();
                }


            }

            self.validateAndSubmitToSAP = function () {
                var form = $('form[id="CashSalesForm"]');

                if (!$(form).valid()) {
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }
                else {

                    // Remove All li before submission, which he had in the previous validation
                    $(form).find(".validation-summary-errors ul li").remove();
                    $(form).find(".validation-summary-valid ul li").remove();

                    self.CashSales.__RequestVerificationToken = $(form).find('input[name="__RequestVerificationToken"]').val();
                    self.CashSales.submittedToSAP(true);

                    $.ajax({
                        url: "@Url.Action("Add", "CashSales", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS(self.CashSales),
                        success: function (data)
                        {
                            self.successfulSave(form, data);
                        },
                        error: function ()
                        {
                            self.errorSave(form);
                        }
                    });
                }
            }
            // CashSales Form Submission using Ajax
            self.validateAndSubmit = function (form) {

                //By Default this function will return false, so form submission will not happen
                if (!$(form).valid()) {
                    window.scrollTo({ top: 0, behavior: 'smooth' });

                }
                else {

                    // Remove All li before submission, which he had in the previous validation
                    $(form).find(".validation-summary-errors ul li").remove();
                    $(form).find(".validation-summary-valid ul li").remove();

                    self.CashSales.__RequestVerificationToken = form[0].value;
                    $.ajax({
                        url: "@Url.Action("Add", "CashSales", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS(self.CashSales),
                        success: function (data)
                        {
                            self.successfulSave(form, data);
                        },
                        error: function ()
                        {
                            self.errorSave(form);
                        }
                    });

                }
            }
            self.removeDocID = function (URL) {
                var res = URL.split("/");
                res.pop();
                URL = res.join("/") + "/"
                return URL;
            }
            self.successfulSave = function (form, data) {
                if (Boolean(data.IsModelValid) === true) {

                    if (self.isCreating) {
                        //self.Initialize();
                        //var table = $('#ItemListTable').DataTable();
                        //table.clear().draw();
                        self.CashSales.docNum(data.DocNum);
                        self.isCreating = false;

                        URL = self.removeDocID(self.previewUrl());
                        URL = URL + data.DocEntry;
                        self.previewUrl(URL);

                        URLTax = self.removeDocID(self.previewUrlTax());
                        URLTax = URLTax + data.DocEntry;
                        self.previewUrlTax(URLTax);

                        window.scrollTo({ top: 0, behavior: 'smooth' });
                        $('<div class="alert alert-success alert-dismissible"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button><h4><i class="icon fa fa-check"></i> Success!</h4> Cash Sales ' + data.DocNum + '  Saved Successfully</div>')
                            .prependTo($(form))
                            .delay(5000)
                            .slideUpAndRemove('slow');

                    } else {
                        if (self.CashSales.submittedToSAP()) {
                            self.isDisabled(self.CashSales.submittedToSAP());
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                            $('<div class="alert alert-success alert-dismissible"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button><h4><i class="icon fa fa-check"></i> Success!</h4> Cash Sales ' + self.CashSales.docNum() + ' Updated Successfully</div>')
                                .prependTo($(form))
                                .delay(5000)
                                .slideUpAndRemove('slow');
                        }
                        else {
                            window.scrollTo({ top: 0, behavior: 'smooth' });
                            $('<div class="alert alert-success alert-dismissible"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button><h4><i class="icon fa fa-check"></i> Success!</h4> Cash Sales ' + self.CashSales.docNum() + ' Updated Successfully</div>')
                                .prependTo($(form))
                                .delay(5000)
                                .slideUpAndRemove('slow');
                        }

                    }


                }
                else {

                    var ErrArray = data.ModelErrList;

                        $(form).find(".validation-summary-errors ul li").remove(); // Remove All li if before Submission had client side errors
                        $(form).find(".validation-summary-valid ul li").remove();  // Remove one li with diplay:none style if before Submission didn't had any client side errors

                        for (var i = 0; i < data.ModelErrList.length; i++) {
                            $(form).find(".validation-summary-errors ul").append("<li>" + ErrArray[i] + "</li>");
                            $(form).find(".validation-summary-valid ul").append("<li>" + ErrArray[i] + "</li>");
                        }
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                }

            }
            self.errorSave = function (form) {
                window.scrollTo({ top: 0, behavior: 'smooth' });
                $('<div class="alert alert-danger alert-dismissible"><button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button><h4><i class="icon fa fa-ban"></i> Alert!</h4><p>Sorry, Some thing went wrong, Please contact website adminitrator</p></div>')
                    .prependTo($(form))
                    .delay(5000)
                    .slideUpAndRemove('slow');
            }

            // on Change of CardCode - CardName value will be selected
            self.CashSales.cardCode.subscribe(function (newValue) {

                //self.CashSales.cardName(newValue);
                // Above statement is enough to trigger the change of selection in knockout
                // because of select2 is used we have to use below statement to trigger the change of selection

                //self.LoadCustomerDetails(newValue);
                $('#CardName').val(newValue).trigger('change');
                self.LoadCustomerBasedDropdowns(newValue);



            });

            // on Change of CardName - CardCode value will be selected
            self.CashSales.cardName.subscribe(function (newValue) {
                //self.DO.cardCode(newValue);
                // Above statement is enough to trigger the change of selection in knockout
                // because of select2 is used we have to use below statement to trigger the change of selection
                $('#CardCode').val(newValue).trigger('change');


            });
            //self.CashSales.selfCollect.subscribe(function (newValue) {

            //    if (newValue === false) {
            //        self.CashSales.selfCollectRemarks1('');
            //        self.CashSales.selfCollectRemarks2('');
            //        self.CashSales.selfCollectRemarks3('');
            //        self.CashSales.selfCollectRemarks4('');
            //    }
            //    else {
            //        self.CashSales.shipTo(null);
            //        $('#ShipTo').val(null).trigger('change');
            //        self.CashSales.shipToAddress1('');
            //        self.CashSales.shipToAddress2('');
            //        self.CashSales.shipToAddress3('');
            //        self.CashSales.shipToAddress4('');
            //    }

            //});


            self.CashSales.billTo.subscribe(function (newValue) {
                if (LoadingFinished === true) {
                    $.ajax({
                        url: "@Url.Action("GetCustomerBillingAddressDetails", "CustomerAddress", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ CardCode: self.CashSales.cardCode, AddressCode: newValue }),
                        success: function (data) {

                            self.CashSales.billToAddress1(data.Street);
                            self.CashSales.billToAddress2(data.Block);
                            self.CashSales.billToAddress3(data.City);
                            self.CashSales.billToAddress4(data.County);
                            self.CashSales.billToAddress5(data.StreetNo);
                        },
                        error: function () { }
                    });
                }
            });
            self.CashSales.shipTo.subscribe(function (newValue) {
                if (LoadingFinished === true) {
                    $.ajax({
                        url: "@Url.Action("GetCustomerShippingAddressDetails", "CustomerAddress", null)",
                        type: 'post',
                        contentType: 'application/x-www-form-urlencoded',
                        data: ko.toJS({ CardCode: self.CashSales.cardCode, AddressCode: newValue }),
                        success: function (data) {

                            self.CashSales.shipToAddress1(data.Street);
                            self.CashSales.shipToAddress2(data.Block);
                            self.CashSales.shipToAddress3(data.City);
                            self.CashSales.shipToAddress4(data.County);
                            self.CashSales.shipToAddress5(data.StreetNo);
                        },
                        error: function () { }
                    });
                }
            });


        }


        function findName(ValueToCompare, element) {
            return element.Value === ValueToCompare;
        }
        function getDropDownText(listofItems, findValue) {
            let foundPayment = listofItems.filter(findName.bind(this, findValue));
            let paymentTypeName = '';

            if (foundPayment.length > 0) {
                paymentTypeName = foundPayment[0].Text;

            }
            return paymentTypeName;
        }

        // Once Document Ready
        $(function () {

            var CashCustomerNameCodes;
            var CustomerNameCodes;

            var GLCodes;
            var PaymentTypes;
            var ItemCodesAndNames;
            var LocationCodeAndNames;
            var TaxCodes;
            $.when(
                // Initial Ajax Requests, while page loading
                //Load Customers
                $.ajax({
                    url: "@Url.Action("GetActiveCustomers", "Customer", null)",
                    type: 'get',
                    contentType: 'application/x-www-form-urlencoded',
                    success: function (data) {

                        CustomerNameCodes = data;

                        $("#CardCode").parent().parent().find('.overlay').hide();
                        $("#CardName").parent().parent().find('.overlay').hide();
                    },
                    error: function () { }
                }),
                //Load Item Codes
                $.ajax({
                url: "@Url.Action("GetActiveItems", "Item", null)",
                type: 'get',
                contentType: 'application/x-www-form-urlencoded',
                success: function (data) {

                    ItemCodesAndNames = data;

                    $("#ItemCode").parent().parent().find('.overlay').hide();
                    $("#Description").parent().parent().find('.overlay').hide();
                },
                error: function () { }
                }),
                //Load Location Codes
                $.ajax({
                    url: "@Url.Action("GetWarehouses", "Location", null)",
                    type: 'get',
                    contentType: 'application/x-www-form-urlencoded',
                    success: function (data) {

                       LocationCodeAndNames = data;
                        $("#Location").parent().parent().find('.overlay').hide();
                        $("#PaymentLocation").parent().parent().find('.overlay').hide();
                    },
                    error: function () { }
                }),
                $.ajax({
                url: "@Url.Action("GetTaxCodes", "Tax", null)",
                type: 'get',
                contentType: 'application/x-www-form-urlencoded',
                data: ko.toJS({ TaxType: "O" }),
                success: function (data) {

                    TaxCodes = data;
                    $("#GstName").parent().parent().find('.overlay').hide();

                },
                error: function () { }
                }),
                //Load GL Codes
                $.ajax({
                    url: "@Url.Action("GetGLCodes", "GeneralLedger", null)",
                    type: 'get',
                    contentType: 'application/x-www-form-urlencoded',
                    success: function (data) {

                        GLCodes = data;
                    },
                    error: function () { }
                }),
                //Load Payment Types
                $.ajax({
                    url: "@Url.Action("GetPaymentTypes", "GeneralLedger", null)",
                    type: 'get',
                    contentType: 'application/x-www-form-urlencoded',
                    success: function (data) {

                        PaymentTypes = data;
                    },
                    error: function () { }
                }),
                //Load Sales Persons
                $.ajax({
                    url: "@Url.Action("GetSalesPersons", "SalesPerson", null)",
                    type: 'get',
                    contentType: 'application/x-www-form-urlencoded',
                    success: function (data) {

                        SalesPersons = data;

                    },
                    error: function () { }
                })
            ).done(function () {
                   //View Model Object Initialization
                var CashSalesVM = new CashSalesViewModel(@Html.ViewModelToJson(Model));
                CashSalesVM.CustomerNameCodes = CustomerNameCodes;
                CashSalesVM.ItemCodesAndNames = ItemCodesAndNames;
                CashSalesVM.LocationCodeAndNames = LocationCodeAndNames;
                CashSalesVM.SalesPersons = SalesPersons;
                CashSalesVM.TaxCodes = TaxCodes;
                CashSalesVM.GLCodes = GLCodes;
                CashSalesVM.PaymentTypes = PaymentTypes;
                ko.applyBindings(CashSalesVM);

                    //Editing CashSales
                    var ExisingCashSales = @Html.ViewModelToJson(Model);

                    var CsLines = ExisingCashSales.lines;
                    if (CsLines !== null) {
                        for (var i = 0; i < CsLines.length; i++) {
                            var defaultDescription = '-';
                            var AddtionalRemarks = '';
                            if (CsLines[i].overwriteDescription !== null) {
                                defaultDescription = CsLines[i].overwriteDescription;
                            }
                            else {
                                defaultDescription = CsLines[i].description;
                            }
                            if (CsLines[i].description2 !== null) {
                                AddtionalRemarks = AddtionalRemarks + CsLines[i].description2 + "<br/>"
                            }
                            if (CsLines[i].description3 !== null) {
                                AddtionalRemarks = AddtionalRemarks + CsLines[i].description3 + "<br/>"
                            }
                            if (CsLines[i].description4 !== null) {
                                AddtionalRemarks = AddtionalRemarks + CsLines[i].description4 + "<br/>"
                            }
                            if (CsLines[i].description5 !== null) {
                                AddtionalRemarks = AddtionalRemarks + CsLines[i].description5 + "<br/>"
                            }
                            if (CsLines[i].description6 !== null) {
                                AddtionalRemarks = AddtionalRemarks + CsLines[i].description6
                            }
                            defaultDescription = defaultDescription + "<span data-toggle='popover' data-trigger='hover' data-placement='top' data-html='true' data-content='" + AddtionalRemarks + "' data-title='Additional Remarks'><i class='fa fa-fw fa-info-circle'></i></span>";
                            var cslinetable = $('#ItemListTable').DataTable();
                            var rowNode = cslinetable.row.add([
                                i + 1,
                                CsLines[i].itemCode,
                                defaultDescription,
                                parseFloat(CsLines[i].qty).toFixed(3),
                                CsLines[i].locationText,
                                parseFloat(CsLines[i].unitPrice).toFixed(4),
                                CsLines[i].gstName,
                                parseFloat(CsLines[i].lineTotal).toFixed(2),
                                "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesLine("
                                + i + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                            ]).draw().node();
                            $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editCashSalesLine(" + i + ", data, event) } }");

                            ko.applyBindings(CashSalesVM, rowNode);
                        }
                    }
                var SqNoteLines = ExisingCashSales.noteLines;

                if (SqNoteLines !== null) {
                    if (jQuery.type(SqNoteLines) !== "undefined") {

                        for (var i = 0; i < SqNoteLines.length; i++) {
                            var sqnotetable = $('#NoteListTable').DataTable();
                            var rowNode = sqnotetable.row.add([
                                i + 1,
                                SqNoteLines[i].note,
                                "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesNote("
                                + i + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                            ]).draw().node();
                            $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editCashSalesNote(" + i + ", data, event) } }");

                            ko.applyBindings(CashSalesVM, rowNode);
                        }
                    }
                }

                var SqPayLines = ExisingCashSales.payLines;

                if (SqPayLines !== null) {
                    if (jQuery.type(SqPayLines) !== "undefined") {

                        for (var i = 0; i < SqPayLines.length; i++) {

                            var sqpaytable = $('#PayListTable').DataTable();
                            var rowNode = sqpaytable.row.add([
                                i + 1,
                                SqPayLines[i].gLName,
                                getDropDownText(PaymentTypes, SqPayLines[i].paymentType),
                                parseFloat(SqPayLines[i].paidAmount).toFixed(2),
                                SqPayLines[i].paymentRemarks,
                                SqPayLines[i].chequeNoReference,
                                getDropDownText(LocationCodeAndNames, SqPayLines[i].payLocation),
                                "<button type='button' class='btn btn-danger btn-xs' data-bind ='event: { click: function(rowid, data, event) { deleteCashSalesPay("
                                + i + ", data, event) } }'><i class='fa fa-fw fa-remove'></i></button>"
                            ]).draw().node();
                            $(rowNode).attr("data-bind", "event: { dblclick: function(rowid, data, event) { editCashSalesPay(" + i + ", data, event) } }");

                            ko.applyBindings(CashSalesVM, rowNode);
                        }
                    }
                }

            });





            $('.select2').select2();
            $('.datepicker').datepicker({ format: 'dd/mm/yyyy', autoclose: true });
            var table = $('#ItemListTable').DataTable(
                {
                    "columnDefs": [
                        { className: "text-right", "targets": [3, 5, 7] }
                    ]
                }
            );
            var LocationStocktable = $('#LocationStock').DataTable({
                "columnDefs": [
                    { className: "text-right", "targets": [1] }
                ]
            });

            var PriceHistorytable = $('#PriceHistory').DataTable(
                {
                    "columnDefs": [
                        { className: "text-right", "targets": [2, 3] }
                    ]
                });
            var NoteListTable = $('#NoteListTable').DataTable(
                {

                });
            var PayListTable = $('#PayListTable').DataTable(
                {
                    "columnDefs": [
                        { className: "text-right", "targets": [3] }
                    ]
                });


            var PriceBreaktable = $('#PriceBreak').DataTable(
                {
                    "columnDefs": [
                        { className: "text-right", "targets": [1, 2] }
                    ],
                    "paging": false,
                    "ordering": false,
                    "info": false
                });



            $('table.bmdatatable tbody').on('click', 'tr td button.btn-danger', function () {

                table.row($(this).parents('tr')).remove().draw();
                //if ($(this).parent().parent().hasClass('highlight')) {
                //    $(this).parent().parent().removeClass('highlight');
                //}
                //else {
                //    table.$('tr.highlight').removeClass('highlight');
                //    $(this).parent().parent().addClass('highlight');
                //}
            });

            // Datables Need to be re-drawn again if datatable intialised in hidden area(That is when we put datatables inside tabs)
            // So here we are call draw to redraw table when each tabs become visible
            $(document).on('shown.bs.modal', '#AddUpdateItemModal', function (event) {
                var table = $('#PriceHistory').DataTable();
                table.columns.adjust().draw();
                var priceBreaktable = $('#PriceBreak').DataTable();
                priceBreaktable.columns.adjust().draw();
            });
            $('body').popover({
                selector: '[data-toggle="popover"]',
                trigger: 'hover',
                html: true,
            });
        });
</script>
}